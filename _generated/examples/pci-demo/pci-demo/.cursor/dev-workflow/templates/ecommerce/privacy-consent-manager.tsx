/**
 * GDPR and CCPA Compliant Privacy Consent Manager
 * Generated by Enhanced Client Project Scaffold
 * 
 * This component provides comprehensive privacy consent management
 * with GDPR and CCPA compliance features.
 */

import React, { useState, useEffect, useCallback } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import {
  Shield,
  Eye,
  EyeOff,
  Download,
  Trash2,
  Edit,
  CheckCircle,
  XCircle,
  AlertTriangle,
  Settings,
  FileText,
  Users,
  Database,
  Globe,
  Lock,
  Unlock,
  Clock,
  RefreshCw,
} from 'lucide-react';

// Types
interface ConsentCategory {
  id: string;
  name: string;
  description: string;
  required: boolean;
  enabled: boolean;
  legalBasis: string;
  dataTypes: string[];
  retentionPeriod: string;
  thirdParties: string[];
  purpose: string;
}

interface DataSubject {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  consentGiven: boolean;
  consentDate: string;
  lastUpdated: string;
  dataCategories: string[];
  processingPurposes: string[];
  thirdPartySharing: boolean;
  marketingConsent: boolean;
  analyticsConsent: boolean;
  cookiesConsent: boolean;
}

interface DataRequest {
  id: string;
  subjectId: string;
  requestType: 'access' | 'rectification' | 'erasure' | 'portability' | 'restriction' | 'objection';
  status: 'pending' | 'in_progress' | 'completed' | 'rejected';
  submittedAt: string;
  completedAt?: string;
  description: string;
  responseData?: any;
}

interface PrivacySettings {
  gdprCompliance: boolean;
  ccpaCompliance: boolean;
  dataRetentionPeriod: number;
  consentExpiryPeriod: number;
  doubleOptIn: boolean;
  ageVerification: boolean;
  minimumAge: number;
  cookieBanner: boolean;
  granularConsent: boolean;
  consentWithdrawal: boolean;
  dataPortability: boolean;
  automatedDecisionMaking: boolean;
}

// GDPR Data Subject Rights
const DATA_SUBJECT_RIGHTS = [
  {
    id: 'access',
    name: 'Right of Access',
    description: 'Obtain confirmation of processing and access to personal data',
    icon: Eye,
  },
  {
    id: 'rectification',
    name: 'Right to Rectification',
    description: 'Correct inaccurate or incomplete personal data',
    icon: Edit,
  },
  {
    id: 'erasure',
    name: 'Right to Erasure',
    description: 'Request deletion of personal data under certain circumstances',
    icon: Trash2,
  },
  {
    id: 'portability',
    name: 'Right to Data Portability',
    description: 'Receive personal data in a structured, machine-readable format',
    icon: Download,
  },
  {
    id: 'restriction',
    name: 'Right to Restrict Processing',
    description: 'Limit how personal data is processed',
    icon: Lock,
  },
  {
    id: 'objection',
    name: 'Right to Object',
    description: 'Object to processing based on legitimate interests',
    icon: XCircle,
  },
];

// Consent Categories
const CONSENT_CATEGORIES: ConsentCategory[] = [
  {
    id: 'necessary',
    name: 'Strictly Necessary',
    description: 'Essential for website functionality and security',
    required: true,
    enabled: true,
    legalBasis: 'Legitimate Interest',
    dataTypes: ['IP Address', 'Session Data', 'Security Tokens'],
    retentionPeriod: '1 year',
    thirdParties: [],
    purpose: 'Website functionality and security',
  },
  {
    id: 'functional',
    name: 'Functional',
    description: 'Enhance user experience and remember preferences',
    required: false,
    enabled: false,
    legalBasis: 'Consent',
    dataTypes: ['User Preferences', 'Language Settings', 'Theme Settings'],
    retentionPeriod: '2 years',
    thirdParties: [],
    purpose: 'User experience enhancement',
  },
  {
    id: 'analytics',
    name: 'Analytics',
    description: 'Analyze website usage and improve performance',
    required: false,
    enabled: false,
    legalBasis: 'Consent',
    dataTypes: ['Usage Data', 'Device Information', 'Behavioral Data'],
    retentionPeriod: '2 years',
    thirdParties: ['Google Analytics', 'Adobe Analytics'],
    purpose: 'Website analytics and improvement',
  },
  {
    id: 'marketing',
    name: 'Marketing',
    description: 'Deliver personalized content and advertisements',
    required: false,
    enabled: false,
    legalBasis: 'Consent',
    dataTypes: ['Email Address', 'Purchase History', 'Browsing Behavior'],
    retentionPeriod: '3 years',
    thirdParties: ['Facebook', 'Google Ads', 'Mailchimp'],
    purpose: 'Marketing and advertising',
  },
  {
    id: 'social_media',
    name: 'Social Media',
    description: 'Enable social media integration and sharing',
    required: false,
    enabled: false,
    legalBasis: 'Consent',
    dataTypes: ['Social Media IDs', 'Shared Content', 'Engagement Data'],
    retentionPeriod: '2 years',
    thirdParties: ['Facebook', 'Twitter', 'LinkedIn', 'Instagram'],
    purpose: 'Social media integration',
  },
];

export default function PrivacyConsentManager() {
  // State
  const [isOpen, setIsOpen] = useState(false);
  const [activeTab, setActiveTab] = useState<'consent' | 'rights' | 'settings' | 'requests'>('consent');
  const [consentCategories, setConsentCategories] = useState<ConsentCategory[]>(CONSENT_CATEGORIES);
  const [dataSubjects, setDataSubjects] = useState<DataSubject[]>([]);
  const [dataRequests, setDataRequests] = useState<DataRequest[]>([]);
  const [privacySettings, setPrivacySettings] = useState<PrivacySettings>({
    gdprCompliance: true,
    ccpaCompliance: true,
    dataRetentionPeriod: 7,
    consentExpiryPeriod: 2,
    doubleOptIn: true,
    ageVerification: true,
    minimumAge: 16,
    cookieBanner: true,
    granularConsent: true,
    consentWithdrawal: true,
    dataPortability: true,
    automatedDecisionMaking: false,
  });
  const [selectedSubject, setSelectedSubject] = useState<DataSubject | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Load initial data
  useEffect(() => {
    loadConsentData();
    loadDataSubjects();
    loadDataRequests();
  }, []);

  const loadConsentData = async () => {
    try {
      // Load consent preferences from localStorage or API
      const savedConsent = localStorage.getItem('privacy_consent');
      if (savedConsent) {
        const consent = JSON.parse(savedConsent);
        setConsentCategories(consent.categories || CONSENT_CATEGORIES);
        setPrivacySettings(consent.settings || privacySettings);
      }
    } catch (err) {
      console.error('Error loading consent data:', err);
    }
  };

  const loadDataSubjects = async () => {
    try {
      // In real implementation, load from API
      const mockSubjects: DataSubject[] = [
        {
          id: '1',
          email: 'user@example.com',
          firstName: 'John',
          lastName: 'Doe',
          consentGiven: true,
          consentDate: '2024-01-15T10:30:00Z',
          lastUpdated: '2024-01-20T14:45:00Z',
          dataCategories: ['Contact Information', 'Purchase History'],
          processingPurposes: ['Order Processing', 'Customer Support'],
          thirdPartySharing: true,
          marketingConsent: true,
          analyticsConsent: true,
          cookiesConsent: true,
        },
      ];
      setDataSubjects(mockSubjects);
    } catch (err) {
      console.error('Error loading data subjects:', err);
    }
  };

  const loadDataRequests = async () => {
    try {
      // In real implementation, load from API
      const mockRequests: DataRequest[] = [
        {
          id: '1',
          subjectId: '1',
          requestType: 'access',
          status: 'completed',
          submittedAt: '2024-01-10T09:00:00Z',
          completedAt: '2024-01-12T15:30:00Z',
          description: 'Request for access to personal data',
        },
        {
          id: '2',
          subjectId: '1',
          requestType: 'erasure',
          status: 'pending',
          submittedAt: '2024-01-18T11:20:00Z',
          description: 'Request for deletion of personal data',
        },
      ];
      setDataRequests(mockRequests);
    } catch (err) {
      console.error('Error loading data requests:', err);
    }
  };

  const saveConsentPreferences = async () => {
    try {
      setIsLoading(true);
      
      const consentData = {
        categories: consentCategories,
        settings: privacySettings,
        timestamp: new Date().toISOString(),
      };
      
      // Save to localStorage
      localStorage.setItem('privacy_consent', JSON.stringify(consentData));
      
      // In real implementation, save to API
      // await fetch('/api/privacy/consent', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify(consentData),
      // });
      
      // Update consent banner if needed
      if (typeof window !== 'undefined') {
        window.dispatchEvent(new CustomEvent('consentUpdated', { detail: consentData }));
      }
      
    } catch (err) {
      setError('Failed to save consent preferences');
      console.error('Error saving consent:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleConsentChange = (categoryId: string, enabled: boolean) => {
    setConsentCategories(prev =>
      prev.map(category =>
        category.id === categoryId ? { ...category, enabled } : category
      )
    );
  };

  const handleDataSubjectRequest = async (requestType: string, subjectId: string) => {
    try {
      setIsLoading(true);
      
      const request: DataRequest = {
        id: Date.now().toString(),
        subjectId,
        requestType: requestType as any,
        status: 'pending',
        submittedAt: new Date().toISOString(),
        description: `Data subject request: ${requestType}`,
      };
      
      // In real implementation, submit to API
      // await fetch('/api/privacy/requests', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify(request),
      // });
      
      setDataRequests(prev => [request, ...prev]);
      
    } catch (err) {
      setError('Failed to submit data subject request');
      console.error('Error submitting request:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleWithdrawConsent = async (subjectId: string) => {
    try {
      setIsLoading(true);
      
      // Update data subject consent status
      setDataSubjects(prev =>
        prev.map(subject =>
          subject.id === subjectId
            ? { ...subject, consentGiven: false, lastUpdated: new Date().toISOString() }
            : subject
        )
      );
      
      // In real implementation, update via API
      // await fetch(`/api/privacy/subjects/${subjectId}/withdraw-consent`, {
      //   method: 'POST',
      // });
      
    } catch (err) {
      setError('Failed to withdraw consent');
      console.error('Error withdrawing consent:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const getStatusBadge = (status: string) => {
    const statusColors = {
      pending: 'bg-yellow-100 text-yellow-800',
      in_progress: 'bg-blue-100 text-blue-800',
      completed: 'bg-green-100 text-green-800',
      rejected: 'bg-red-100 text-red-800',
    };
    
    return (
      <Badge className={statusColors[status as keyof typeof statusColors]}>
        {status.toUpperCase()}
      </Badge>
    );
  };

  const getRequestTypeIcon = (requestType: string) => {
    const right = DATA_SUBJECT_RIGHTS.find(r => r.id === requestType);
    return right ? right.icon : FileText;
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm">
          <Shield className="h-4 w-4 mr-2" />
          Privacy Settings
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Shield className="h-5 w-5" />
            <span>Privacy & Consent Management</span>
          </DialogTitle>
          <DialogDescription>
            Manage privacy settings, consent preferences, and data subject rights
            in compliance with GDPR and CCPA regulations.
          </DialogDescription>
        </DialogHeader>

        {/* Tab Navigation */}
        <div className="flex space-x-1 bg-gray-100 p-1 rounded-lg">
          {[
            { id: 'consent', label: 'Consent', icon: CheckCircle },
            { id: 'rights', label: 'Data Rights', icon: Users },
            { id: 'settings', label: 'Settings', icon: Settings },
            { id: 'requests', label: 'Requests', icon: FileText },
          ].map(({ id, label, icon: Icon }) => (
            <Button
              key={id}
              variant={activeTab === id ? 'default' : 'ghost'}
              size="sm"
              onClick={() => setActiveTab(id as any)}
              className="flex-1"
            >
              <Icon className="h-4 w-4 mr-2" />
              {label}
            </Button>
          ))}
        </div>

        {/* Consent Management Tab */}
        {activeTab === 'consent' && (
          <div className="space-y-6">
            <div className="text-center">
              <h3 className="text-lg font-semibold">Consent Preferences</h3>
              <p className="text-sm text-gray-600">
                Choose which data processing activities you consent to
              </p>
            </div>

            <div className="space-y-4">
              {consentCategories.map((category) => (
                <Card key={category.id}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <CardTitle className="flex items-center space-x-2">
                          <span>{category.name}</span>
                          {category.required && (
                            <Badge variant="outline" className="text-xs">
                              Required
                            </Badge>
                          )}
                        </CardTitle>
                        <CardDescription>{category.description}</CardDescription>
                      </div>
                      <Switch
                        checked={category.enabled}
                        onCheckedChange={(enabled) => handleConsentChange(category.id, enabled)}
                        disabled={category.required}
                      />
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <strong>Legal Basis:</strong> {category.legalBasis}
                      </div>
                      <div>
                        <strong>Retention:</strong> {category.retentionPeriod}
                      </div>
                      <div>
                        <strong>Data Types:</strong> {category.dataTypes.join(', ')}
                      </div>
                      <div>
                        <strong>Purpose:</strong> {category.purpose}
                      </div>
                    </div>
                    {category.thirdParties.length > 0 && (
                      <div className="mt-2">
                        <strong>Third Parties:</strong>{' '}
                        <span className="text-sm text-gray-600">
                          {category.thirdParties.join(', ')}
                        </span>
                      </div>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>

            <div className="flex justify-end space-x-2">
              <Button variant="outline" onClick={() => setIsOpen(false)}>
                Cancel
              </Button>
              <Button onClick={saveConsentPreferences} disabled={isLoading}>
                {isLoading ? (
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <CheckCircle className="h-4 w-4 mr-2" />
                )}
                Save Preferences
              </Button>
            </div>
          </div>
        )}

        {/* Data Subject Rights Tab */}
        {activeTab === 'rights' && (
          <div className="space-y-6">
            <div className="text-center">
              <h3 className="text-lg font-semibold">Data Subject Rights</h3>
              <p className="text-sm text-gray-600">
                Exercise your rights under GDPR and CCPA
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {DATA_SUBJECT_RIGHTS.map((right) => {
                const Icon = right.icon;
                return (
                  <Card key={right.id} className="cursor-pointer hover:shadow-md transition-shadow">
                    <CardHeader>
                      <CardTitle className="flex items-center space-x-2">
                        <Icon className="h-5 w-5" />
                        <span>{right.name}</span>
                      </CardTitle>
                      <CardDescription>{right.description}</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <Button
                        size="sm"
                        onClick={() => handleDataSubjectRequest(right.id, '1')}
                        disabled={isLoading}
                        className="w-full"
                      >
                        {isLoading ? (
                          <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                        ) : (
                          <FileText className="h-4 w-4 mr-2" />
                        )}
                        Submit Request
                      </Button>
                    </CardContent>
                  </Card>
                );
              })}
            </div>

            {/* Data Subjects List */}
            <div>
              <h4 className="text-md font-semibold mb-4">Your Data</h4>
              <div className="space-y-2">
                {dataSubjects.map((subject) => (
                  <Card key={subject.id}>
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="font-medium">
                            {subject.firstName} {subject.lastName}
                          </div>
                          <div className="text-sm text-gray-600">{subject.email}</div>
                          <div className="text-xs text-gray-500">
                            Consent: {subject.consentGiven ? 'Given' : 'Not Given'} • 
                            Last Updated: {new Date(subject.lastUpdated).toLocaleDateString()}
                          </div>
                        </div>
                        <div className="flex space-x-2">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => setSelectedSubject(subject)}
                          >
                            <Eye className="h-4 w-4 mr-1" />
                            View
                          </Button>
                          {subject.consentGiven && (
                            <Button
                              size="sm"
                              variant="destructive"
                              onClick={() => handleWithdrawConsent(subject.id)}
                              disabled={isLoading}
                            >
                              <XCircle className="h-4 w-4 mr-1" />
                              Withdraw
                            </Button>
                          )}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Settings Tab */}
        {activeTab === 'settings' && (
          <div className="space-y-6">
            <div className="text-center">
              <h3 className="text-lg font-semibold">Privacy Settings</h3>
              <p className="text-sm text-gray-600">
                Configure privacy and compliance settings
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>GDPR Compliance</CardTitle>
                  <CardDescription>European Union data protection</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="gdpr-compliance">GDPR Compliance</Label>
                    <Switch
                      id="gdpr-compliance"
                      checked={privacySettings.gdprCompliance}
                      onCheckedChange={(checked) =>
                        setPrivacySettings(prev => ({ ...prev, gdprCompliance: checked }))
                      }
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <Label htmlFor="double-opt-in">Double Opt-in</Label>
                    <Switch
                      id="double-opt-in"
                      checked={privacySettings.doubleOptIn}
                      onCheckedChange={(checked) =>
                        setPrivacySettings(prev => ({ ...prev, doubleOptIn: checked }))
                      }
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <Label htmlFor="age-verification">Age Verification</Label>
                    <Switch
                      id="age-verification"
                      checked={privacySettings.ageVerification}
                      onCheckedChange={(checked) =>
                        setPrivacySettings(prev => ({ ...prev, ageVerification: checked }))
                      }
                    />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>CCPA Compliance</CardTitle>
                  <CardDescription>California Consumer Privacy Act</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="ccpa-compliance">CCPA Compliance</Label>
                    <Switch
                      id="ccpa-compliance"
                      checked={privacySettings.ccpaCompliance}
                      onCheckedChange={(checked) =>
                        setPrivacySettings(prev => ({ ...prev, ccpaCompliance: checked }))
                      }
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <Label htmlFor="data-portability">Data Portability</Label>
                    <Switch
                      id="data-portability"
                      checked={privacySettings.dataPortability}
                      onCheckedChange={(checked) =>
                        setPrivacySettings(prev => ({ ...prev, dataPortability: checked }))
                      }
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <Label htmlFor="consent-withdrawal">Consent Withdrawal</Label>
                    <Switch
                      id="consent-withdrawal"
                      checked={privacySettings.consentWithdrawal}
                      onCheckedChange={(checked) =>
                        setPrivacySettings(prev => ({ ...prev, consentWithdrawal: checked }))
                      }
                    />
                  </div>
                </CardContent>
              </Card>
            </div>

            <div className="flex justify-end space-x-2">
              <Button variant="outline" onClick={() => setIsOpen(false)}>
                Cancel
              </Button>
              <Button onClick={saveConsentPreferences} disabled={isLoading}>
                {isLoading ? (
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <CheckCircle className="h-4 w-4 mr-2" />
                )}
                Save Settings
              </Button>
            </div>
          </div>
        )}

        {/* Requests Tab */}
        {activeTab === 'requests' && (
          <div className="space-y-6">
            <div className="text-center">
              <h3 className="text-lg font-semibold">Data Subject Requests</h3>
              <p className="text-sm text-gray-600">
                Track your data subject requests and their status
              </p>
            </div>

            <div className="space-y-4">
              {dataRequests.length === 0 ? (
                <div className="text-center py-8">
                  <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-600">No data subject requests found</p>
                </div>
              ) : (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Request Type</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead>Submitted</TableHead>
                      <TableHead>Completed</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {dataRequests.map((request) => {
                      const Icon = getRequestTypeIcon(request.requestType);
                      return (
                        <TableRow key={request.id}>
                          <TableCell>
                            <div className="flex items-center space-x-2">
                              <Icon className="h-4 w-4" />
                              <span className="capitalize">{request.requestType}</span>
                            </div>
                          </TableCell>
                          <TableCell>{getStatusBadge(request.status)}</TableCell>
                          <TableCell>
                            {new Date(request.submittedAt).toLocaleDateString()}
                          </TableCell>
                          <TableCell>
                            {request.completedAt
                              ? new Date(request.completedAt).toLocaleDateString()
                              : '-'}
                          </TableCell>
                          <TableCell>
                            <Button size="sm" variant="outline">
                              <Eye className="h-4 w-4 mr-1" />
                              View
                            </Button>
                          </TableCell>
                        </TableRow>
                      );
                    })}
                  </TableBody>
                </Table>
              )}
            </div>
          </div>
        )}

        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <div className="flex items-center space-x-2">
              <AlertTriangle className="h-4 w-4 text-red-600" />
              <span className="text-red-800">{error}</span>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}
