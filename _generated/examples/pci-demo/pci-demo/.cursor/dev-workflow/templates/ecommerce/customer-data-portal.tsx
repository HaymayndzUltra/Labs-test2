/**
 * GDPR and CCPA Compliant Customer Data Portal
 * Generated by Enhanced Client Project Scaffold
 * 
 * This component provides a comprehensive customer data management portal
 * with full GDPR and CCPA compliance features.
 */

import React, { useState, useEffect, useCallback } from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/tabs';
import {
  User,
  Mail,
  Phone,
  MapPin,
  CreditCard,
  ShoppingBag,
  Eye,
  Download,
  Trash2,
  Edit,
  Shield,
  Lock,
  Unlock,
  Clock,
  CheckCircle,
  XCircle,
  AlertTriangle,
  FileText,
  Database,
  Globe,
  Settings,
  RefreshCw,
  Search,
  Filter,
  SortAsc,
  SortDesc,
} from 'lucide-react';

// Types
interface CustomerData {
  id: string;
  personalInfo: {
    firstName: string;
    lastName: string;
    email: string;
    phone?: string;
    dateOfBirth?: string;
    gender?: string;
    nationality?: string;
  };
  address: {
    street: string;
    city: string;
    state: string;
    postalCode: string;
    country: string;
  };
  preferences: {
    language: string;
    currency: string;
    timezone: string;
    marketingConsent: boolean;
    analyticsConsent: boolean;
    cookiesConsent: boolean;
    newsletterConsent: boolean;
  };
  accountInfo: {
    createdAt: string;
    lastLogin: string;
    status: 'active' | 'inactive' | 'suspended' | 'deleted';
    verificationStatus: 'verified' | 'pending' | 'unverified';
    mfaEnabled: boolean;
  };
  dataCategories: string[];
  processingPurposes: string[];
  retentionPeriod: string;
  lastUpdated: string;
}

interface DataRequest {
  id: string;
  customerId: string;
  requestType: 'access' | 'rectification' | 'erasure' | 'portability' | 'restriction' | 'objection';
  status: 'pending' | 'in_progress' | 'completed' | 'rejected';
  submittedAt: string;
  completedAt?: string;
  description: string;
  responseData?: any;
  estimatedCompletion: string;
}

interface DataProcessingActivity {
  id: string;
  purpose: string;
  legalBasis: string;
  dataCategories: string[];
  recipients: string[];
  retentionPeriod: string;
  thirdCountryTransfers: boolean;
  automatedDecisionMaking: boolean;
  specialCategories: boolean;
}

interface ConsentRecord {
  id: string;
  customerId: string;
  consentType: string;
  given: boolean;
  givenAt: string;
  withdrawnAt?: string;
  purpose: string;
  legalBasis: string;
  version: string;
  ipAddress: string;
  userAgent: string;
}

// Data Categories
const DATA_CATEGORIES = [
  'Personal Identification',
  'Contact Information',
  'Financial Information',
  'Purchase History',
  'Browsing Behavior',
  'Device Information',
  'Location Data',
  'Communication Preferences',
  'Marketing Data',
  'Analytics Data',
  'Social Media Data',
  'Biometric Data',
];

// Processing Purposes
const PROCESSING_PURPOSES = [
  'Order Processing',
  'Customer Support',
  'Marketing Communications',
  'Website Analytics',
  'Fraud Prevention',
  'Legal Compliance',
  'Product Development',
  'Personalization',
  'Social Media Integration',
  'Payment Processing',
];

// Legal Basis
const LEGAL_BASIS = [
  'Consent',
  'Contract',
  'Legal Obligation',
  'Vital Interests',
  'Public Task',
  'Legitimate Interests',
];

export default function CustomerDataPortal() {
  // State
  const [customers, setCustomers] = useState<CustomerData[]>([]);
  const [dataRequests, setDataRequests] = useState<DataRequest[]>([]);
  const [processingActivities, setProcessingActivities] = useState<DataProcessingActivity[]>([]);
  const [consentRecords, setConsentRecords] = useState<ConsentRecord[]>([]);
  const [selectedCustomer, setSelectedCustomer] = useState<CustomerData | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [sortBy, setSortBy] = useState<string>('lastUpdated');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
  const [isDataRequestDialogOpen, setIsDataRequestDialogOpen] = useState(false);
  const [newDataRequest, setNewDataRequest] = useState({
    requestType: '',
    description: '',
  });

  // Load initial data
  useEffect(() => {
    loadCustomers();
    loadDataRequests();
    loadProcessingActivities();
    loadConsentRecords();
  }, []);

  const loadCustomers = async () => {
    try {
      setIsLoading(true);
      // In real implementation, load from API
      const mockCustomers: CustomerData[] = [
        {
          id: '1',
          personalInfo: {
            firstName: 'John',
            lastName: 'Doe',
            email: 'john.doe@example.com',
            phone: '+1-555-0123',
            dateOfBirth: '1990-01-15',
            gender: 'Male',
            nationality: 'US',
          },
          address: {
            street: '123 Main St',
            city: 'New York',
            state: 'NY',
            postalCode: '10001',
            country: 'United States',
          },
          preferences: {
            language: 'en',
            currency: 'USD',
            timezone: 'America/New_York',
            marketingConsent: true,
            analyticsConsent: true,
            cookiesConsent: true,
            newsletterConsent: true,
          },
          accountInfo: {
            createdAt: '2023-01-15T10:30:00Z',
            lastLogin: '2024-01-20T14:45:00Z',
            status: 'active',
            verificationStatus: 'verified',
            mfaEnabled: true,
          },
          dataCategories: ['Personal Identification', 'Contact Information', 'Purchase History'],
          processingPurposes: ['Order Processing', 'Customer Support', 'Marketing Communications'],
          retentionPeriod: '7 years',
          lastUpdated: '2024-01-20T14:45:00Z',
        },
        {
          id: '2',
          personalInfo: {
            firstName: 'Jane',
            lastName: 'Smith',
            email: 'jane.smith@example.com',
            phone: '+1-555-0456',
            dateOfBirth: '1985-05-22',
            gender: 'Female',
            nationality: 'CA',
          },
          address: {
            street: '456 Oak Ave',
            city: 'Toronto',
            state: 'ON',
            postalCode: 'M5V 3A8',
            country: 'Canada',
          },
          preferences: {
            language: 'en',
            currency: 'CAD',
            timezone: 'America/Toronto',
            marketingConsent: false,
            analyticsConsent: true,
            cookiesConsent: true,
            newsletterConsent: false,
          },
          accountInfo: {
            createdAt: '2023-03-10T09:15:00Z',
            lastLogin: '2024-01-18T11:20:00Z',
            status: 'active',
            verificationStatus: 'verified',
            mfaEnabled: false,
          },
          dataCategories: ['Personal Identification', 'Contact Information'],
          processingPurposes: ['Order Processing', 'Customer Support'],
          retentionPeriod: '5 years',
          lastUpdated: '2024-01-18T11:20:00Z',
        },
      ];
      setCustomers(mockCustomers);
    } catch (err) {
      setError('Failed to load customer data');
      console.error('Error loading customers:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const loadDataRequests = async () => {
    try {
      // In real implementation, load from API
      const mockRequests: DataRequest[] = [
        {
          id: '1',
          customerId: '1',
          requestType: 'access',
          status: 'completed',
          submittedAt: '2024-01-10T09:00:00Z',
          completedAt: '2024-01-12T15:30:00Z',
          description: 'Request for access to personal data',
          estimatedCompletion: '2024-01-12T15:30:00Z',
        },
        {
          id: '2',
          customerId: '1',
          requestType: 'erasure',
          status: 'pending',
          submittedAt: '2024-01-18T11:20:00Z',
          description: 'Request for deletion of personal data',
          estimatedCompletion: '2024-01-25T11:20:00Z',
        },
        {
          id: '3',
          customerId: '2',
          requestType: 'portability',
          status: 'in_progress',
          submittedAt: '2024-01-19T14:30:00Z',
          description: 'Request for data portability',
          estimatedCompletion: '2024-01-26T14:30:00Z',
        },
      ];
      setDataRequests(mockRequests);
    } catch (err) {
      console.error('Error loading data requests:', err);
    }
  };

  const loadProcessingActivities = async () => {
    try {
      // In real implementation, load from API
      const mockActivities: DataProcessingActivity[] = [
        {
          id: '1',
          purpose: 'Order Processing',
          legalBasis: 'Contract',
          dataCategories: ['Personal Identification', 'Contact Information', 'Financial Information'],
          recipients: ['Payment Processors', 'Shipping Companies'],
          retentionPeriod: '7 years',
          thirdCountryTransfers: true,
          automatedDecisionMaking: false,
          specialCategories: false,
        },
        {
          id: '2',
          purpose: 'Marketing Communications',
          legalBasis: 'Consent',
          dataCategories: ['Contact Information', 'Purchase History', 'Marketing Data'],
          recipients: ['Email Service Providers', 'Marketing Platforms'],
          retentionPeriod: '3 years',
          thirdCountryTransfers: true,
          automatedDecisionMaking: true,
          specialCategories: false,
        },
        {
          id: '3',
          purpose: 'Website Analytics',
          legalBasis: 'Legitimate Interests',
          dataCategories: ['Browsing Behavior', 'Device Information', 'Location Data'],
          recipients: ['Analytics Providers'],
          retentionPeriod: '2 years',
          thirdCountryTransfers: true,
          automatedDecisionMaking: true,
          specialCategories: false,
        },
      ];
      setProcessingActivities(mockActivities);
    } catch (err) {
      console.error('Error loading processing activities:', err);
    }
  };

  const loadConsentRecords = async () => {
    try {
      // In real implementation, load from API
      const mockConsent: ConsentRecord[] = [
        {
          id: '1',
          customerId: '1',
          consentType: 'Marketing Communications',
          given: true,
          givenAt: '2023-01-15T10:30:00Z',
          purpose: 'Email marketing and promotional communications',
          legalBasis: 'Consent',
          version: '1.0',
          ipAddress: '192.168.1.100',
          userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        },
        {
          id: '2',
          customerId: '1',
          consentType: 'Analytics',
          given: true,
          givenAt: '2023-01-15T10:30:00Z',
          purpose: 'Website usage analytics and performance monitoring',
          legalBasis: 'Consent',
          version: '1.0',
          ipAddress: '192.168.1.100',
          userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        },
        {
          id: '3',
          customerId: '2',
          consentType: 'Marketing Communications',
          given: false,
          givenAt: '2023-03-10T09:15:00Z',
          withdrawnAt: '2023-06-15T14:20:00Z',
          purpose: 'Email marketing and promotional communications',
          legalBasis: 'Consent',
          version: '1.0',
          ipAddress: '192.168.1.101',
          userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
        },
      ];
      setConsentRecords(mockConsent);
    } catch (err) {
      console.error('Error loading consent records:', err);
    }
  };

  const handleDataRequest = async () => {
    try {
      setIsLoading(true);
      
      if (!selectedCustomer || !newDataRequest.requestType) {
        setError('Please select a customer and request type');
        return;
      }
      
      const request: DataRequest = {
        id: Date.now().toString(),
        customerId: selectedCustomer.id,
        requestType: newDataRequest.requestType as any,
        status: 'pending',
        submittedAt: new Date().toISOString(),
        description: newDataRequest.description,
        estimatedCompletion: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days
      };
      
      // In real implementation, submit to API
      // await fetch('/api/privacy/requests', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify(request),
      // });
      
      setDataRequests(prev => [request, ...prev]);
      setIsDataRequestDialogOpen(false);
      setNewDataRequest({ requestType: '', description: '' });
      
    } catch (err) {
      setError('Failed to submit data request');
      console.error('Error submitting request:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleExportData = async (customerId: string) => {
    try {
      setIsLoading(true);
      
      // In real implementation, generate and download data export
      const customer = customers.find(c => c.id === customerId);
      if (!customer) return;
      
      const exportData = {
        customer: customer,
        processingActivities: processingActivities,
        consentRecords: consentRecords.filter(c => c.customerId === customerId),
        exportedAt: new Date().toISOString(),
        format: 'JSON',
        version: '1.0',
      };
      
      const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `customer-data-export-${customerId}-${Date.now()}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
    } catch (err) {
      setError('Failed to export customer data');
      console.error('Error exporting data:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteCustomer = async (customerId: string) => {
    try {
      setIsLoading(true);
      
      // In real implementation, delete via API
      // await fetch(`/api/customers/${customerId}`, { method: 'DELETE' });
      
      setCustomers(prev => prev.filter(c => c.id !== customerId));
      
    } catch (err) {
      setError('Failed to delete customer data');
      console.error('Error deleting customer:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const filteredCustomers = customers.filter(customer => {
    const matchesSearch = 
      customer.personalInfo.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      customer.personalInfo.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      customer.personalInfo.email.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesFilter = filterStatus === 'all' || customer.accountInfo.status === filterStatus;
    
    return matchesSearch && matchesFilter;
  });

  const sortedCustomers = [...filteredCustomers].sort((a, b) => {
    let aValue, bValue;
    
    switch (sortBy) {
      case 'name':
        aValue = `${a.personalInfo.firstName} ${a.personalInfo.lastName}`;
        bValue = `${b.personalInfo.firstName} ${b.personalInfo.lastName}`;
        break;
      case 'email':
        aValue = a.personalInfo.email;
        bValue = b.personalInfo.email;
        break;
      case 'status':
        aValue = a.accountInfo.status;
        bValue = b.accountInfo.status;
        break;
      case 'lastUpdated':
      default:
        aValue = new Date(a.lastUpdated).getTime();
        bValue = new Date(b.lastUpdated).getTime();
        break;
    }
    
    if (sortOrder === 'asc') {
      return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
    } else {
      return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;
    }
  });

  const getStatusBadge = (status: string) => {
    const statusColors = {
      active: 'bg-green-100 text-green-800',
      inactive: 'bg-yellow-100 text-yellow-800',
      suspended: 'bg-orange-100 text-orange-800',
      deleted: 'bg-red-100 text-red-800',
      pending: 'bg-yellow-100 text-yellow-800',
      in_progress: 'bg-blue-100 text-blue-800',
      completed: 'bg-green-100 text-green-800',
      rejected: 'bg-red-100 text-red-800',
    };
    
    return (
      <Badge className={statusColors[status as keyof typeof statusColors]}>
        {status.toUpperCase()}
      </Badge>
    );
  };

  const getRequestTypeIcon = (requestType: string) => {
    const icons = {
      access: Eye,
      rectification: Edit,
      erasure: Trash2,
      portability: Download,
      restriction: Lock,
      objection: XCircle,
    };
    
    const Icon = icons[requestType as keyof typeof icons] || FileText;
    return <Icon className="h-4 w-4" />;
  };

  if (isLoading && customers.length === 0) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">
              Customer Data Portal
            </h1>
            <p className="text-gray-600 mt-2">
              GDPR and CCPA Compliant Customer Data Management
            </p>
          </div>
          <div className="flex items-center space-x-4">
            <Badge variant="outline" className="flex items-center space-x-1">
              <Shield className="h-4 w-4" />
              <span>GDPR Compliant</span>
            </Badge>
            <Badge variant="outline" className="flex items-center space-x-1">
              <Shield className="h-4 w-4" />
              <span>CCPA Compliant</span>
            </Badge>
          </div>
        </div>
      </div>

      {/* Search and Filters */}
      <div className="mb-6 space-y-4">
        <div className="flex items-center space-x-4">
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search customers by name or email..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
          </div>
          <Select value={filterStatus} onValueChange={setFilterStatus}>
            <SelectTrigger className="w-48">
              <SelectValue placeholder="Filter by status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Status</SelectItem>
              <SelectItem value="active">Active</SelectItem>
              <SelectItem value="inactive">Inactive</SelectItem>
              <SelectItem value="suspended">Suspended</SelectItem>
              <SelectItem value="deleted">Deleted</SelectItem>
            </SelectContent>
          </Select>
          <Select value={sortBy} onValueChange={setSortBy}>
            <SelectTrigger className="w-48">
              <SelectValue placeholder="Sort by" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="lastUpdated">Last Updated</SelectItem>
              <SelectItem value="name">Name</SelectItem>
              <SelectItem value="email">Email</SelectItem>
              <SelectItem value="status">Status</SelectItem>
            </SelectContent>
          </Select>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}
          >
            {sortOrder === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />}
          </Button>
        </div>
      </div>

      {/* Main Content */}
      <Tabs defaultValue="customers" className="space-y-6">
        <TabsList>
          <TabsTrigger value="customers">Customers</TabsTrigger>
          <TabsTrigger value="requests">Data Requests</TabsTrigger>
          <TabsTrigger value="processing">Processing Activities</TabsTrigger>
          <TabsTrigger value="consent">Consent Records</TabsTrigger>
        </TabsList>

        {/* Customers Tab */}
        <TabsContent value="customers">
          <div className="space-y-4">
            {sortedCustomers.map((customer) => (
              <Card key={customer.id}>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div>
                      <CardTitle className="flex items-center space-x-2">
                        <User className="h-5 w-5" />
                        <span>{customer.personalInfo.firstName} {customer.personalInfo.lastName}</span>
                        {getStatusBadge(customer.accountInfo.status)}
                      </CardTitle>
                      <CardDescription>{customer.personalInfo.email}</CardDescription>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => setSelectedCustomer(customer)}
                      >
                        <Eye className="h-4 w-4 mr-1" />
                        View Details
                      </Button>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => handleExportData(customer.id)}
                        disabled={isLoading}
                      >
                        <Download className="h-4 w-4 mr-1" />
                        Export
                      </Button>
                      <AlertDialog>
                        <AlertDialogTrigger asChild>
                          <Button size="sm" variant="destructive">
                            <Trash2 className="h-4 w-4 mr-1" />
                            Delete
                          </Button>
                        </AlertDialogTrigger>
                        <AlertDialogContent>
                          <AlertDialogHeader>
                            <AlertDialogTitle>Delete Customer Data</AlertDialogTitle>
                            <AlertDialogDescription>
                              This will permanently delete all customer data in compliance with GDPR Article 17 (Right to Erasure).
                              This action cannot be undone.
                            </AlertDialogDescription>
                          </AlertDialogHeader>
                          <AlertDialogFooter>
                            <AlertDialogCancel>Cancel</AlertDialogCancel>
                            <AlertDialogAction
                              onClick={() => handleDeleteCustomer(customer.id)}
                              className="bg-red-600 hover:bg-red-700"
                            >
                              Delete Permanently
                            </AlertDialogAction>
                          </AlertDialogFooter>
                        </AlertDialogContent>
                      </AlertDialog>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>
                      <strong>Phone:</strong> {customer.personalInfo.phone || 'N/A'}
                    </div>
                    <div>
                      <strong>Location:</strong> {customer.address.city}, {customer.address.country}
                    </div>
                    <div>
                      <strong>Created:</strong> {new Date(customer.accountInfo.createdAt).toLocaleDateString()}
                    </div>
                    <div>
                      <strong>Last Login:</strong> {new Date(customer.accountInfo.lastLogin).toLocaleDateString()}
                    </div>
                    <div>
                      <strong>Data Categories:</strong> {customer.dataCategories.length}
                    </div>
                    <div>
                      <strong>Processing Purposes:</strong> {customer.processingPurposes.length}
                    </div>
                    <div>
                      <strong>Retention Period:</strong> {customer.retentionPeriod}
                    </div>
                    <div>
                      <strong>MFA:</strong> {customer.accountInfo.mfaEnabled ? 'Enabled' : 'Disabled'}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Data Requests Tab */}
        <TabsContent value="requests">
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold">Data Subject Requests</h3>
              <Button
                onClick={() => setIsDataRequestDialogOpen(true)}
                disabled={!selectedCustomer}
              >
                <FileText className="h-4 w-4 mr-2" />
                New Request
              </Button>
            </div>
            
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Request Type</TableHead>
                  <TableHead>Customer</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Submitted</TableHead>
                  <TableHead>Estimated Completion</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {dataRequests.map((request) => {
                  const customer = customers.find(c => c.id === request.customerId);
                  return (
                    <TableRow key={request.id}>
                      <TableCell>
                        <div className="flex items-center space-x-2">
                          {getRequestTypeIcon(request.requestType)}
                          <span className="capitalize">{request.requestType}</span>
                        </div>
                      </TableCell>
                      <TableCell>
                        {customer ? `${customer.personalInfo.firstName} ${customer.personalInfo.lastName}` : 'Unknown'}
                      </TableCell>
                      <TableCell>{getStatusBadge(request.status)}</TableCell>
                      <TableCell>
                        {new Date(request.submittedAt).toLocaleDateString()}
                      </TableCell>
                      <TableCell>
                        {new Date(request.estimatedCompletion).toLocaleDateString()}
                      </TableCell>
                      <TableCell>
                        <Button size="sm" variant="outline">
                          <Eye className="h-4 w-4 mr-1" />
                          View
                        </Button>
                      </TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </div>
        </TabsContent>

        {/* Processing Activities Tab */}
        <TabsContent value="processing">
          <div className="space-y-4">
            <h3 className="text-lg font-semibold">Data Processing Activities</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {processingActivities.map((activity) => (
                <Card key={activity.id}>
                  <CardHeader>
                    <CardTitle className="text-base">{activity.purpose}</CardTitle>
                    <CardDescription>Legal Basis: {activity.legalBasis}</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-2 text-sm">
                    <div>
                      <strong>Data Categories:</strong>
                      <div className="mt-1">
                        {activity.dataCategories.map((category, index) => (
                          <Badge key={index} variant="outline" className="mr-1 mb-1 text-xs">
                            {category}
                          </Badge>
                        ))}
                      </div>
                    </div>
                    <div>
                      <strong>Recipients:</strong> {activity.recipients.join(', ')}
                    </div>
                    <div>
                      <strong>Retention:</strong> {activity.retentionPeriod}
                    </div>
                    <div className="flex items-center space-x-4">
                      <span className={`flex items-center space-x-1 ${activity.thirdCountryTransfers ? 'text-orange-600' : 'text-green-600'}`}>
                        <Globe className="h-4 w-4" />
                        <span>Third Country</span>
                      </span>
                      <span className={`flex items-center space-x-1 ${activity.automatedDecisionMaking ? 'text-orange-600' : 'text-green-600'}`}>
                        <Settings className="h-4 w-4" />
                        <span>Automated</span>
                      </span>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </TabsContent>

        {/* Consent Records Tab */}
        <TabsContent value="consent">
          <div className="space-y-4">
            <h3 className="text-lg font-semibold">Consent Records</h3>
            
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Customer</TableHead>
                  <TableHead>Consent Type</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Given At</TableHead>
                  <TableHead>Withdrawn At</TableHead>
                  <TableHead>Legal Basis</TableHead>
                  <TableHead>Version</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {consentRecords.map((record) => {
                  const customer = customers.find(c => c.id === record.customerId);
                  return (
                    <TableRow key={record.id}>
                      <TableCell>
                        {customer ? `${customer.personalInfo.firstName} ${customer.personalInfo.lastName}` : 'Unknown'}
                      </TableCell>
                      <TableCell>{record.consentType}</TableCell>
                      <TableCell>
                        <div className="flex items-center space-x-1">
                          {record.given ? (
                            <CheckCircle className="h-4 w-4 text-green-600" />
                          ) : (
                            <XCircle className="h-4 w-4 text-red-600" />
                          )}
                          <span>{record.given ? 'Given' : 'Withdrawn'}</span>
                        </div>
                      </TableCell>
                      <TableCell>
                        {new Date(record.givenAt).toLocaleDateString()}
                      </TableCell>
                      <TableCell>
                        {record.withdrawnAt ? new Date(record.withdrawnAt).toLocaleDateString() : '-'}
                      </TableCell>
                      <TableCell>{record.legalBasis}</TableCell>
                      <TableCell>{record.version}</TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </div>
        </TabsContent>
      </Tabs>

      {/* Data Request Dialog */}
      <Dialog open={isDataRequestDialogOpen} onOpenChange={setIsDataRequestDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Submit Data Subject Request</DialogTitle>
            <DialogDescription>
              Submit a data subject request for {selectedCustomer?.personalInfo.firstName} {selectedCustomer?.personalInfo.lastName}
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="request-type">Request Type</Label>
              <Select
                value={newDataRequest.requestType}
                onValueChange={(value) => setNewDataRequest(prev => ({ ...prev, requestType: value }))}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select request type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="access">Right of Access</SelectItem>
                  <SelectItem value="rectification">Right to Rectification</SelectItem>
                  <SelectItem value="erasure">Right to Erasure</SelectItem>
                  <SelectItem value="portability">Right to Data Portability</SelectItem>
                  <SelectItem value="restriction">Right to Restrict Processing</SelectItem>
                  <SelectItem value="objection">Right to Object</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                value={newDataRequest.description}
                onChange={(e) => setNewDataRequest(prev => ({ ...prev, description: e.target.value }))}
                placeholder="Describe the specific data or processing you want to address..."
                rows={3}
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDataRequestDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleDataRequest} disabled={isLoading || !newDataRequest.requestType}>
              {isLoading ? (
                <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
              ) : (
                <FileText className="h-4 w-4 mr-2" />
              )}
              Submit Request
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {error && (
        <div className="fixed bottom-4 right-4 bg-red-50 border border-red-200 rounded-lg p-4 max-w-md">
          <div className="flex items-center space-x-2">
            <AlertTriangle className="h-4 w-4 text-red-600" />
            <span className="text-red-800">{error}</span>
          </div>
        </div>
      )}
    </div>
  );
}
