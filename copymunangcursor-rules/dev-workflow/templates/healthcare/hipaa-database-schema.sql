-- HIPAA Compliant Medical Records Database Schema
-- Generated by Enhanced Client Project Scaffold
-- Industry: Healthcare
-- Compliance: HIPAA

-- Create database
CREATE DATABASE medical_records_hipaa;

-- Use database
\c medical_records_hipaa;

-- Create extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";

-- Create users table with HIPAA requirements
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    role VARCHAR(50) DEFAULT 'user',
    -- HIPAA specific fields
    phi_access_level VARCHAR(50) DEFAULT 'restricted' CHECK (phi_access_level IN ('restricted', 'standard', 'full')),
    mfa_enabled BOOLEAN DEFAULT FALSE,
    last_password_change TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    security_question VARCHAR(255),
    security_answer_hash VARCHAR(255),
    failed_login_attempts INTEGER DEFAULT 0,
    account_locked_until TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create patients table with encrypted PHI
CREATE TABLE patients (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    patient_id VARCHAR(50) UNIQUE NOT NULL,
    medical_record_number VARCHAR(50) UNIQUE NOT NULL,
    -- All PHI data is encrypted
    encrypted_data TEXT NOT NULL,
    data_hash VARCHAR(64) NOT NULL, -- SHA-256 hash for integrity verification
    phi_access_level VARCHAR(50) DEFAULT 'restricted' CHECK (phi_access_level IN ('restricted', 'standard', 'full')),
    consent_given BOOLEAN DEFAULT FALSE,
    consent_date TIMESTAMP,
    consent_withdrawal_date TIMESTAMP,
    -- HIPAA specific fields
    phi_encryption_key_id VARCHAR(100),
    data_retention_until TIMESTAMP,
    anonymization_status VARCHAR(50) DEFAULT 'none' CHECK (anonymization_status IN ('none', 'partial', 'full')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create audit logs table for HIPAA compliance
CREATE TABLE audit_logs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id),
    patient_id UUID REFERENCES patients(id),
    action VARCHAR(100) NOT NULL,
    resource VARCHAR(100) NOT NULL,
    details JSONB,
    ip_address INET,
    user_agent TEXT,
    -- HIPAA specific audit fields
    phi_accessed BOOLEAN DEFAULT FALSE,
    access_reason TEXT,
    access_level VARCHAR(50),
    data_elements_accessed TEXT[], -- Array of PHI elements accessed
    encryption_status VARCHAR(50) DEFAULT 'encrypted',
    breach_risk_level VARCHAR(20) DEFAULT 'low' CHECK (breach_risk_level IN ('low', 'medium', 'high', 'critical')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create medical records table
CREATE TABLE medical_records (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    patient_id UUID REFERENCES patients(id) NOT NULL,
    record_type VARCHAR(50) NOT NULL, -- 'diagnosis', 'treatment', 'medication', 'lab_result', 'imaging'
    -- Encrypted medical data
    encrypted_content TEXT NOT NULL,
    content_hash VARCHAR(64) NOT NULL,
    -- Metadata (non-PHI)
    record_date TIMESTAMP NOT NULL,
    provider_id UUID REFERENCES users(id),
    department VARCHAR(100),
    status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'archived', 'deleted')),
    -- HIPAA compliance fields
    phi_encryption_key_id VARCHAR(100),
    access_restrictions TEXT[], -- Array of access restrictions
    retention_until TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create appointments table
CREATE TABLE appointments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    patient_id UUID REFERENCES patients(id) NOT NULL,
    provider_id UUID REFERENCES users(id) NOT NULL,
    appointment_date TIMESTAMP NOT NULL,
    duration_minutes INTEGER DEFAULT 30,
    -- Encrypted appointment details
    encrypted_notes TEXT,
    notes_hash VARCHAR(64),
    -- Non-PHI metadata
    status VARCHAR(50) DEFAULT 'scheduled' CHECK (status IN ('scheduled', 'confirmed', 'in_progress', 'completed', 'cancelled', 'no_show')),
    appointment_type VARCHAR(50), -- 'consultation', 'follow_up', 'procedure', 'emergency'
    department VARCHAR(100),
    room_number VARCHAR(20),
    -- HIPAA compliance
    phi_encryption_key_id VARCHAR(100),
    access_logged BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create consent management table
CREATE TABLE consent_records (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    patient_id UUID REFERENCES patients(id) NOT NULL,
    consent_type VARCHAR(50) NOT NULL, -- 'treatment', 'research', 'marketing', 'disclosure'
    consent_given BOOLEAN NOT NULL,
    consent_date TIMESTAMP NOT NULL,
    withdrawal_date TIMESTAMP,
    -- Encrypted consent details
    encrypted_details TEXT,
    details_hash VARCHAR(64),
    -- Legal requirements
    witness_name VARCHAR(255),
    witness_signature_hash VARCHAR(64),
    legal_guardian_name VARCHAR(255),
    legal_guardian_relationship VARCHAR(100),
    -- HIPAA compliance
    phi_encryption_key_id VARCHAR(100),
    retention_until TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create security incidents table
CREATE TABLE security_incidents (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    incident_type VARCHAR(50) NOT NULL, -- 'breach', 'unauthorized_access', 'data_loss', 'system_compromise'
    severity VARCHAR(20) NOT NULL CHECK (severity IN ('low', 'medium', 'high', 'critical')),
    description TEXT NOT NULL,
    -- Affected data
    affected_patients INTEGER DEFAULT 0,
    phi_elements_involved TEXT[],
    -- Incident details
    discovered_at TIMESTAMP NOT NULL,
    contained_at TIMESTAMP,
    resolved_at TIMESTAMP,
    -- Response actions
    immediate_actions TEXT[],
    notification_sent BOOLEAN DEFAULT FALSE,
    hhs_notified BOOLEAN DEFAULT FALSE,
    media_notified BOOLEAN DEFAULT FALSE,
    -- Investigation
    investigator_id UUID REFERENCES users(id),
    investigation_notes TEXT,
    root_cause TEXT,
    preventive_measures TEXT[],
    -- HIPAA compliance
    breach_risk_assessment TEXT,
    affected_individuals_notified BOOLEAN DEFAULT FALSE,
    notification_date TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create encryption keys table
CREATE TABLE encryption_keys (
    id VARCHAR(100) PRIMARY KEY,
    key_data TEXT NOT NULL, -- Encrypted key data
    algorithm VARCHAR(50) NOT NULL DEFAULT 'AES-256-GCM',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP,
    status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'expired', 'revoked')),
    rotation_count INTEGER DEFAULT 0,
    last_used_at TIMESTAMP
);

-- Create access control table
CREATE TABLE access_controls (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id) NOT NULL,
    resource_type VARCHAR(50) NOT NULL, -- 'patient', 'medical_record', 'appointment'
    resource_id UUID,
    permission VARCHAR(50) NOT NULL, -- 'read', 'write', 'delete', 'admin'
    granted_by UUID REFERENCES users(id),
    granted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP,
    reason TEXT,
    -- HIPAA compliance
    phi_access_authorized BOOLEAN DEFAULT FALSE,
    access_justification TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for performance and HIPAA compliance
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_phi_access_level ON users(phi_access_level);
CREATE INDEX idx_users_mfa_enabled ON users(mfa_enabled);

CREATE INDEX idx_patients_patient_id ON patients(patient_id);
CREATE INDEX idx_patients_medical_record_number ON patients(medical_record_number);
CREATE INDEX idx_patients_consent_given ON patients(consent_given);
CREATE INDEX idx_patients_phi_access_level ON patients(phi_access_level);
CREATE INDEX idx_patients_data_retention_until ON patients(data_retention_until);

CREATE INDEX idx_audit_logs_user_id ON audit_logs(user_id);
CREATE INDEX idx_audit_logs_patient_id ON audit_logs(patient_id);
CREATE INDEX idx_audit_logs_created_at ON audit_logs(created_at);
CREATE INDEX idx_audit_logs_phi_accessed ON audit_logs(phi_accessed);
CREATE INDEX idx_audit_logs_action ON audit_logs(action);
CREATE INDEX idx_audit_logs_breach_risk_level ON audit_logs(breach_risk_level);

CREATE INDEX idx_medical_records_patient_id ON medical_records(patient_id);
CREATE INDEX idx_medical_records_record_type ON medical_records(record_type);
CREATE INDEX idx_medical_records_record_date ON medical_records(record_date);
CREATE INDEX idx_medical_records_provider_id ON medical_records(provider_id);
CREATE INDEX idx_medical_records_status ON medical_records(status);

CREATE INDEX idx_appointments_patient_id ON appointments(patient_id);
CREATE INDEX idx_appointments_provider_id ON appointments(provider_id);
CREATE INDEX idx_appointments_appointment_date ON appointments(appointment_date);
CREATE INDEX idx_appointments_status ON appointments(status);

CREATE INDEX idx_consent_records_patient_id ON consent_records(patient_id);
CREATE INDEX idx_consent_records_consent_type ON consent_records(consent_type);
CREATE INDEX idx_consent_records_consent_given ON consent_records(consent_given);

CREATE INDEX idx_security_incidents_severity ON security_incidents(severity);
CREATE INDEX idx_security_incidents_discovered_at ON security_incidents(discovered_at);
CREATE INDEX idx_security_incidents_resolved_at ON security_incidents(resolved_at);

CREATE INDEX idx_access_controls_user_id ON access_controls(user_id);
CREATE INDEX idx_access_controls_resource_type ON access_controls(resource_type);
CREATE INDEX idx_access_controls_expires_at ON access_controls(expires_at);

-- Create functions for HIPAA compliance
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create function to log PHI access
CREATE OR REPLACE FUNCTION log_phi_access(
    p_user_id UUID,
    p_patient_id UUID,
    p_action VARCHAR(100),
    p_resource VARCHAR(100),
    p_phi_accessed BOOLEAN,
    p_access_reason TEXT,
    p_ip_address INET,
    p_data_elements TEXT[]
)
RETURNS VOID AS $$
BEGIN
    INSERT INTO audit_logs (
        user_id, patient_id, action, resource, phi_accessed, 
        access_reason, ip_address, data_elements_accessed
    ) VALUES (
        p_user_id, p_patient_id, p_action, p_resource, p_phi_accessed,
        p_access_reason, p_ip_address, p_data_elements
    );
END;
$$ language 'plpgsql';

-- Create function to check PHI access permission
CREATE OR REPLACE FUNCTION check_phi_access_permission(
    p_user_id UUID,
    p_patient_id UUID
)
RETURNS BOOLEAN AS $$
DECLARE
    user_access_level VARCHAR(50);
    patient_consent BOOLEAN;
BEGIN
    -- Get user access level
    SELECT phi_access_level INTO user_access_level
    FROM users WHERE id = p_user_id;
    
    -- Get patient consent
    SELECT consent_given INTO patient_consent
    FROM patients WHERE id = p_patient_id;
    
    -- Check access permission
    IF user_access_level = 'restricted' OR NOT patient_consent THEN
        RETURN FALSE;
    END IF;
    
    RETURN TRUE;
END;
$$ language 'plpgsql';

-- Create function to anonymize PHI data
CREATE OR REPLACE FUNCTION anonymize_phi_data(
    p_patient_id UUID,
    p_anonymization_level VARCHAR(50)
)
RETURNS VOID AS $$
DECLARE
    patient_record RECORD;
BEGIN
    -- Get patient record
    SELECT * INTO patient_record FROM patients WHERE id = p_patient_id;
    
    -- Update anonymization status
    UPDATE patients 
    SET anonymization_status = p_anonymization_level,
        updated_at = CURRENT_TIMESTAMP
    WHERE id = p_patient_id;
    
    -- Log anonymization action
    PERFORM log_phi_access(
        NULL, -- System action
        p_patient_id,
        'DATA_ANONYMIZATION',
        'patient_data',
        TRUE,
        'PHI data anonymization',
        '127.0.0.1',
        ARRAY['all_phi_elements']
    );
END;
$$ language 'plpgsql';

-- Create triggers
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_patients_updated_at BEFORE UPDATE ON patients
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_medical_records_updated_at BEFORE UPDATE ON medical_records
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_appointments_updated_at BEFORE UPDATE ON appointments
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_security_incidents_updated_at BEFORE UPDATE ON security_incidents
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Create view for HIPAA compliance monitoring
CREATE VIEW hipaa_compliance_dashboard AS
SELECT 
    DATE_TRUNC('day', created_at) as date,
    COUNT(*) as total_phi_access,
    COUNT(CASE WHEN phi_accessed = TRUE THEN 1 END) as phi_access_count,
    COUNT(CASE WHEN action LIKE '%DENIED%' THEN 1 END) as denied_access_count,
    COUNT(CASE WHEN breach_risk_level = 'high' OR breach_risk_level = 'critical' THEN 1 END) as high_risk_events
FROM audit_logs
WHERE created_at >= CURRENT_DATE - INTERVAL '30 days'
GROUP BY DATE_TRUNC('day', created_at)
ORDER BY date DESC;

-- Create view for patient consent status
CREATE VIEW patient_consent_status AS
SELECT 
    p.patient_id,
    p.medical_record_number,
    p.consent_given,
    p.consent_date,
    p.consent_withdrawal_date,
    p.phi_access_level,
    COUNT(c.id) as consent_records_count,
    MAX(c.consent_date) as latest_consent_date
FROM patients p
LEFT JOIN consent_records c ON p.id = c.patient_id
GROUP BY p.id, p.patient_id, p.medical_record_number, p.consent_given, 
         p.consent_date, p.consent_withdrawal_date, p.phi_access_level;

-- Insert sample data for testing
INSERT INTO users (email, password_hash, first_name, last_name, role, phi_access_level, mfa_enabled) VALUES
('admin@medicalcenter.com', crypt('admin123', gen_salt('bf')), 'Admin', 'User', 'admin', 'full', true),
('doctor@medicalcenter.com', crypt('doctor123', gen_salt('bf')), 'Dr. John', 'Smith', 'doctor', 'full', true),
('nurse@medicalcenter.com', crypt('nurse123', gen_salt('bf')), 'Jane', 'Doe', 'nurse', 'standard', false),
('receptionist@medicalcenter.com', crypt('reception123', gen_salt('bf')), 'Bob', 'Johnson', 'receptionist', 'restricted', false);

-- Create sample encryption key
INSERT INTO encryption_keys (id, key_data, algorithm, expires_at) VALUES
('key_001', encode(gen_random_bytes(32), 'base64'), 'AES-256-GCM', CURRENT_TIMESTAMP + INTERVAL '90 days');

-- Grant permissions
GRANT ALL PRIVILEGES ON DATABASE medical_records_hipaa TO postgres;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO postgres;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO postgres;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO postgres;
