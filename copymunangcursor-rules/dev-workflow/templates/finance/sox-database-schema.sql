-- SOX and PCI DSS Compliant Financial Database Schema
-- Generated by Enhanced Client Project Scaffold
-- 
-- This schema provides comprehensive financial data management
-- with SOX compliance controls and PCI DSS security requirements.

-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";

-- Create audit schema for SOX compliance
CREATE SCHEMA IF NOT EXISTS audit;

-- Create financial schema for PCI compliance
CREATE SCHEMA IF NOT EXISTS financial;

-- Set search path
SET search_path TO public, financial, audit;

-- Create custom types
CREATE TYPE user_role AS ENUM ('user', 'manager', 'admin', 'auditor');
CREATE TYPE access_level AS ENUM ('standard', 'elevated', 'management', 'audit');
CREATE TYPE account_type AS ENUM ('checking', 'savings', 'credit', 'investment');
CREATE TYPE account_status AS ENUM ('active', 'suspended', 'closed', 'pending');
CREATE TYPE transaction_type AS ENUM ('debit', 'credit', 'transfer', 'payment', 'refund');
CREATE TYPE transaction_status AS ENUM ('pending', 'processing', 'completed', 'failed', 'cancelled', 'refunded');
CREATE TYPE risk_level AS ENUM ('low', 'medium', 'high', 'critical');
CREATE TYPE payment_method AS ENUM ('credit_card', 'debit_card', 'bank_transfer', 'digital_wallet', 'check');
CREATE TYPE audit_action AS ENUM (
    'LOGIN', 'LOGOUT', 'PASSWORD_CHANGE', 'ACCOUNT_CREATED', 'ACCOUNT_UPDATED',
    'TRANSACTION_CREATED', 'TRANSACTION_APPROVED', 'TRANSACTION_REJECTED',
    'DUAL_AUTHORIZATION', 'MANAGEMENT_APPROVAL', 'FRAUD_DETECTED',
    'DATA_ACCESSED', 'DATA_EXPORTED', 'CONFIGURATION_CHANGED'
);

-- Users table with SOX compliance fields
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    role user_role NOT NULL DEFAULT 'user',
    access_level access_level NOT NULL DEFAULT 'standard',
    
    -- SOX compliance fields
    dual_authorization_required BOOLEAN NOT NULL DEFAULT FALSE,
    management_approval_required BOOLEAN NOT NULL DEFAULT FALSE,
    mfa_enabled BOOLEAN NOT NULL DEFAULT FALSE,
    mfa_secret VARCHAR(255),
    last_password_change TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    password_expires_at TIMESTAMP WITH TIME ZONE,
    account_locked BOOLEAN NOT NULL DEFAULT FALSE,
    failed_login_attempts INTEGER NOT NULL DEFAULT 0,
    locked_until TIMESTAMP WITH TIME ZONE,
    
    -- Audit fields
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    created_by UUID REFERENCES users(id),
    updated_by UUID REFERENCES users(id),
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID REFERENCES users(id)
);

-- User sessions for audit trail
CREATE TABLE user_sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    session_token VARCHAR(255) UNIQUE NOT NULL,
    ip_address INET NOT NULL,
    user_agent TEXT,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    last_activity TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Financial accounts with SOX controls
CREATE TABLE financial_accounts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    account_number VARCHAR(50) UNIQUE NOT NULL,
    account_type account_type NOT NULL,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    
    -- Financial data
    balance DECIMAL(15,2) NOT NULL DEFAULT 0.00,
    credit_limit DECIMAL(15,2) DEFAULT 0.00,
    available_credit DECIMAL(15,2) GENERATED ALWAYS AS (credit_limit - balance) STORED,
    status account_status NOT NULL DEFAULT 'active',
    
    -- SOX compliance controls
    requires_dual_authorization BOOLEAN NOT NULL DEFAULT FALSE,
    dual_authorization_threshold DECIMAL(15,2) DEFAULT 10000.00,
    management_approval_threshold DECIMAL(15,2) DEFAULT 50000.00,
    daily_transaction_limit DECIMAL(15,2) DEFAULT 100000.00,
    monthly_transaction_limit DECIMAL(15,2) DEFAULT 1000000.00,
    
    -- PCI compliance fields
    encryption_key_id VARCHAR(255),
    tokenization_enabled BOOLEAN NOT NULL DEFAULT TRUE,
    
    -- Audit fields
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    created_by UUID REFERENCES users(id),
    updated_by UUID REFERENCES users(id),
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID REFERENCES users(id)
);

-- Transactions with comprehensive SOX and PCI compliance
CREATE TABLE financial_transactions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    transaction_id VARCHAR(50) UNIQUE NOT NULL,
    account_id UUID NOT NULL REFERENCES financial_accounts(id) ON DELETE CASCADE,
    
    -- Transaction details
    amount DECIMAL(15,2) NOT NULL,
    currency VARCHAR(3) NOT NULL DEFAULT 'USD',
    transaction_type transaction_type NOT NULL,
    description TEXT,
    status transaction_status NOT NULL DEFAULT 'pending',
    
    -- PCI compliance - tokenized/encrypted data
    payment_token VARCHAR(255), -- Tokenized payment method
    encrypted_payment_data TEXT, -- Encrypted payment details
    card_last_four VARCHAR(4), -- Last 4 digits for display
    card_brand VARCHAR(50), -- Visa, MasterCard, etc.
    payment_method payment_method,
    
    -- SOX compliance - authorization and approval
    authorized_by UUID NOT NULL REFERENCES users(id),
    approved_by UUID REFERENCES users(id),
    dual_authorization_used BOOLEAN NOT NULL DEFAULT FALSE,
    dual_authorizer_id UUID REFERENCES users(id),
    management_approval_used BOOLEAN NOT NULL DEFAULT FALSE,
    management_approver_id UUID REFERENCES users(id),
    
    -- Risk management
    risk_score INTEGER DEFAULT 0,
    risk_level risk_level DEFAULT 'low',
    fraud_detection_triggered BOOLEAN NOT NULL DEFAULT FALSE,
    fraud_review_notes TEXT,
    
    -- External references
    external_transaction_id VARCHAR(255), -- Stripe, PayPal, etc.
    external_reference TEXT,
    
    -- Audit fields
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    processed_at TIMESTAMP WITH TIME ZONE,
    completed_at TIMESTAMP WITH TIME ZONE,
    created_by UUID REFERENCES users(id),
    updated_by UUID REFERENCES users(id),
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID REFERENCES users(id)
);

-- Payment tokens for PCI compliance
CREATE TABLE payment_tokens (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    token VARCHAR(255) UNIQUE NOT NULL,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    
    -- Encrypted card data
    encrypted_card_data TEXT NOT NULL,
    card_last_four VARCHAR(4) NOT NULL,
    card_brand VARCHAR(50) NOT NULL,
    expiry_month INTEGER NOT NULL,
    expiry_year INTEGER NOT NULL,
    
    -- Token management
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    expires_at TIMESTAMP WITH TIME ZONE,
    last_used_at TIMESTAMP WITH TIME ZONE,
    usage_count INTEGER NOT NULL DEFAULT 0
);

-- SOX compliance audit logs
CREATE TABLE audit.financial_audit_logs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id),
    session_id UUID REFERENCES user_sessions(id),
    
    -- Audit details
    action audit_action NOT NULL,
    resource_type VARCHAR(100) NOT NULL,
    resource_id VARCHAR(255),
    resource_name VARCHAR(255),
    
    -- Financial impact
    financial_impact DECIMAL(15,2),
    currency VARCHAR(3) DEFAULT 'USD',
    
    -- SOX compliance fields
    control_activity VARCHAR(255),
    segregation_of_duties_violation BOOLEAN NOT NULL DEFAULT FALSE,
    management_override BOOLEAN NOT NULL DEFAULT FALSE,
    control_effectiveness VARCHAR(50),
    
    -- PCI compliance fields
    card_data_accessed BOOLEAN NOT NULL DEFAULT FALSE,
    token_used VARCHAR(255),
    encryption_status VARCHAR(50) DEFAULT 'encrypted',
    data_classification VARCHAR(50) DEFAULT 'confidential',
    
    -- Request details
    ip_address INET,
    user_agent TEXT,
    request_id VARCHAR(255),
    
    -- Additional context
    details JSONB,
    old_values JSONB,
    new_values JSONB,
    
    -- Timestamps
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    effective_date DATE NOT NULL DEFAULT CURRENT_DATE
);

-- SOX compliance controls configuration
CREATE TABLE sox_controls (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    control_id VARCHAR(50) UNIQUE NOT NULL,
    control_name VARCHAR(255) NOT NULL,
    control_description TEXT,
    control_type VARCHAR(100) NOT NULL, -- 'preventive', 'detective', 'corrective'
    control_category VARCHAR(100) NOT NULL, -- 'authorization', 'segregation', 'reconciliation'
    
    -- Control parameters
    threshold_amount DECIMAL(15,2),
    requires_dual_authorization BOOLEAN NOT NULL DEFAULT FALSE,
    requires_management_approval BOOLEAN NOT NULL DEFAULT FALSE,
    requires_documentation BOOLEAN NOT NULL DEFAULT FALSE,
    
    -- Control status
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    effective_date DATE NOT NULL DEFAULT CURRENT_DATE,
    expiration_date DATE,
    
    -- Audit fields
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    created_by UUID REFERENCES users(id),
    updated_by UUID REFERENCES users(id)
);

-- Dual authorization requests
CREATE TABLE dual_authorization_requests (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    transaction_id UUID NOT NULL REFERENCES financial_transactions(id) ON DELETE CASCADE,
    requester_id UUID NOT NULL REFERENCES users(id),
    authorizer_id UUID REFERENCES users(id),
    
    -- Request details
    request_reason TEXT,
    authorization_code VARCHAR(10), -- 6-digit code for verification
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    
    -- Status
    status VARCHAR(50) NOT NULL DEFAULT 'pending', -- 'pending', 'approved', 'rejected', 'expired'
    approved_at TIMESTAMP WITH TIME ZONE,
    rejected_at TIMESTAMP WITH TIME ZONE,
    rejection_reason TEXT,
    
    -- Audit fields
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Management approval requests
CREATE TABLE management_approval_requests (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    transaction_id UUID NOT NULL REFERENCES financial_transactions(id) ON DELETE CASCADE,
    requester_id UUID NOT NULL REFERENCES users(id),
    approver_id UUID REFERENCES users(id),
    
    -- Request details
    request_reason TEXT,
    business_justification TEXT,
    risk_assessment TEXT,
    approval_code VARCHAR(10),
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    
    -- Status
    status VARCHAR(50) NOT NULL DEFAULT 'pending', -- 'pending', 'approved', 'rejected', 'expired'
    approved_at TIMESTAMP WITH TIME ZONE,
    rejected_at TIMESTAMP WITH TIME ZONE,
    rejection_reason TEXT,
    
    -- Audit fields
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Fraud detection logs
CREATE TABLE fraud_detection_logs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    transaction_id UUID NOT NULL REFERENCES financial_transactions(id) ON DELETE CASCADE,
    
    -- Fraud analysis
    risk_score INTEGER NOT NULL,
    risk_level risk_level NOT NULL,
    risk_factors JSONB NOT NULL,
    fraud_indicators JSONB,
    
    -- Detection details
    detection_algorithm VARCHAR(100),
    detection_timestamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    false_positive BOOLEAN DEFAULT FALSE,
    manual_review_required BOOLEAN NOT NULL DEFAULT FALSE,
    
    -- Review and resolution
    reviewed_by UUID REFERENCES users(id),
    reviewed_at TIMESTAMP WITH TIME ZONE,
    review_notes TEXT,
    resolution VARCHAR(50), -- 'approved', 'rejected', 'escalated'
    
    -- Audit fields
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Compliance monitoring metrics
CREATE TABLE compliance_metrics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    metric_date DATE NOT NULL,
    metric_type VARCHAR(100) NOT NULL, -- 'sox_compliance', 'pci_compliance', 'fraud_detection'
    
    -- SOX metrics
    sox_compliance_score INTEGER,
    total_financial_activities INTEGER DEFAULT 0,
    high_value_transactions INTEGER DEFAULT 0,
    dual_authorization_usage INTEGER DEFAULT 0,
    management_approval_usage INTEGER DEFAULT 0,
    control_violations INTEGER DEFAULT 0,
    
    -- PCI metrics
    pci_compliance_score INTEGER,
    encryption_coverage DECIMAL(5,2),
    tokenization_usage DECIMAL(5,2),
    data_breach_incidents INTEGER DEFAULT 0,
    
    -- Fraud metrics
    fraud_detection_rate DECIMAL(5,2),
    false_positive_rate DECIMAL(5,2),
    fraud_loss_amount DECIMAL(15,2) DEFAULT 0.00,
    
    -- General metrics
    total_transactions INTEGER DEFAULT 0,
    total_transaction_amount DECIMAL(15,2) DEFAULT 0.00,
    average_transaction_amount DECIMAL(15,2) DEFAULT 0.00,
    
    -- Audit fields
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Create indexes for performance and compliance
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_role ON users(role);
CREATE INDEX idx_users_access_level ON users(access_level);
CREATE INDEX idx_users_created_at ON users(created_at);

CREATE INDEX idx_user_sessions_user_id ON user_sessions(user_id);
CREATE INDEX idx_user_sessions_token ON user_sessions(session_token);
CREATE INDEX idx_user_sessions_active ON user_sessions(is_active) WHERE is_active = TRUE;

CREATE INDEX idx_financial_accounts_user_id ON financial_accounts(user_id);
CREATE INDEX idx_financial_accounts_account_number ON financial_accounts(account_number);
CREATE INDEX idx_financial_accounts_status ON financial_accounts(status);

CREATE INDEX idx_transactions_account_id ON financial_transactions(account_id);
CREATE INDEX idx_transactions_transaction_id ON financial_transactions(transaction_id);
CREATE INDEX idx_transactions_status ON financial_transactions(status);
CREATE INDEX idx_transactions_created_at ON financial_transactions(created_at);
CREATE INDEX idx_transactions_amount ON financial_transactions(amount);
CREATE INDEX idx_transactions_authorized_by ON financial_transactions(authorized_by);
CREATE INDEX idx_transactions_risk_level ON financial_transactions(risk_level);

CREATE INDEX idx_payment_tokens_user_id ON payment_tokens(user_id);
CREATE INDEX idx_payment_tokens_token ON payment_tokens(token);
CREATE INDEX idx_payment_tokens_active ON payment_tokens(is_active) WHERE is_active = TRUE;

CREATE INDEX idx_audit_logs_user_id ON audit.financial_audit_logs(user_id);
CREATE INDEX idx_audit_logs_action ON audit.financial_audit_logs(action);
CREATE INDEX idx_audit_logs_created_at ON audit.financial_audit_logs(created_at);
CREATE INDEX idx_audit_logs_financial_impact ON audit.financial_audit_logs(financial_impact);
CREATE INDEX idx_audit_logs_effective_date ON audit.financial_audit_logs(effective_date);

CREATE INDEX idx_sox_controls_active ON sox_controls(is_active) WHERE is_active = TRUE;
CREATE INDEX idx_sox_controls_type ON sox_controls(control_type);

CREATE INDEX idx_dual_auth_requests_transaction_id ON dual_authorization_requests(transaction_id);
CREATE INDEX idx_dual_auth_requests_status ON dual_authorization_requests(status);
CREATE INDEX idx_dual_auth_requests_expires_at ON dual_authorization_requests(expires_at);

CREATE INDEX idx_mgmt_approval_requests_transaction_id ON management_approval_requests(transaction_id);
CREATE INDEX idx_mgmt_approval_requests_status ON management_approval_requests(status);
CREATE INDEX idx_mgmt_approval_requests_expires_at ON management_approval_requests(expires_at);

CREATE INDEX idx_fraud_logs_transaction_id ON fraud_detection_logs(transaction_id);
CREATE INDEX idx_fraud_logs_risk_level ON fraud_detection_logs(risk_level);
CREATE INDEX idx_fraud_logs_detection_timestamp ON fraud_detection_logs(detection_timestamp);

CREATE INDEX idx_compliance_metrics_date ON compliance_metrics(metric_date);
CREATE INDEX idx_compliance_metrics_type ON compliance_metrics(metric_type);

-- Create triggers for audit logging
CREATE OR REPLACE FUNCTION audit_trigger_function()
RETURNS TRIGGER AS $$
BEGIN
    -- Insert audit log for the change
    INSERT INTO audit.financial_audit_logs (
        user_id,
        action,
        resource_type,
        resource_id,
        financial_impact,
        old_values,
        new_values,
        ip_address,
        details
    ) VALUES (
        COALESCE(NEW.updated_by, NEW.created_by),
        CASE 
            WHEN TG_OP = 'INSERT' THEN 'ACCOUNT_CREATED'::audit_action
            WHEN TG_OP = 'UPDATE' THEN 'ACCOUNT_UPDATED'::audit_action
            WHEN TG_OP = 'DELETE' THEN 'ACCOUNT_DELETED'::audit_action
        END,
        TG_TABLE_NAME,
        NEW.id::text,
        CASE 
            WHEN TG_TABLE_NAME = 'financial_transactions' THEN NEW.amount
            WHEN TG_TABLE_NAME = 'financial_accounts' THEN NEW.balance
            ELSE NULL
        END,
        CASE WHEN TG_OP = 'UPDATE' THEN to_jsonb(OLD) ELSE NULL END,
        CASE WHEN TG_OP != 'DELETE' THEN to_jsonb(NEW) ELSE NULL END,
        inet_client_addr(),
        jsonb_build_object(
            'operation', TG_OP,
            'table', TG_TABLE_NAME,
            'timestamp', NOW()
        )
    );
    
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

-- Create audit triggers
CREATE TRIGGER users_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE ON users
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER financial_accounts_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE ON financial_accounts
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER financial_transactions_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE ON financial_transactions
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

-- Create function for SOX compliance checks
CREATE OR REPLACE FUNCTION check_sox_compliance(
    p_user_id UUID,
    p_amount DECIMAL(15,2),
    p_transaction_type transaction_type
) RETURNS TABLE (
    requires_dual_auth BOOLEAN,
    requires_mgmt_approval BOOLEAN,
    control_violations TEXT[]
) AS $$
DECLARE
    v_user_role user_role;
    v_user_access_level access_level;
    v_dual_auth_threshold DECIMAL(15,2);
    v_mgmt_approval_threshold DECIMAL(15,2);
    v_violations TEXT[] := '{}';
BEGIN
    -- Get user details
    SELECT role, access_level, dual_authorization_required, management_approval_required
    INTO v_user_role, v_user_access_level, requires_dual_auth, requires_mgmt_approval
    FROM users
    WHERE id = p_user_id;
    
    -- Get thresholds
    SELECT 
        COALESCE(dual_authorization_threshold, 10000.00),
        COALESCE(management_approval_threshold, 50000.00)
    INTO v_dual_auth_threshold, v_mgmt_approval_threshold
    FROM sox_controls
    WHERE is_active = TRUE
    ORDER BY effective_date DESC
    LIMIT 1;
    
    -- Check dual authorization requirement
    requires_dual_auth := requires_dual_auth OR p_amount >= v_dual_auth_threshold;
    
    -- Check management approval requirement
    requires_mgmt_approval := requires_mgmt_approval OR p_amount >= v_mgmt_approval_threshold;
    
    -- Check for control violations
    IF v_user_access_level = 'standard' AND p_amount > 100000 THEN
        v_violations := array_append(v_violations, 'Standard user attempting high-value transaction');
    END IF;
    
    IF v_user_role = 'user' AND requires_mgmt_approval THEN
        v_violations := array_append(v_violations, 'Non-manager attempting management-approval transaction');
    END IF;
    
    RETURN QUERY SELECT requires_dual_auth, requires_mgmt_approval, v_violations;
END;
$$ LANGUAGE plpgsql;

-- Create function for fraud detection
CREATE OR REPLACE FUNCTION detect_fraud(
    p_transaction_id UUID,
    p_amount DECIMAL(15,2),
    p_user_id UUID,
    p_ip_address INET
) RETURNS TABLE (
    risk_score INTEGER,
    risk_level risk_level,
    risk_factors TEXT[],
    fraud_detected BOOLEAN
) AS $$
DECLARE
    v_risk_score INTEGER := 0;
    v_risk_factors TEXT[] := '{}';
    v_recent_transactions INTEGER;
    v_high_value_count INTEGER;
    v_risk_level risk_level := 'low';
BEGIN
    -- Amount-based risk
    IF p_amount > 50000 THEN
        v_risk_score := v_risk_score + 30;
        v_risk_factors := array_append(v_risk_factors, 'high_amount');
    ELSIF p_amount > 10000 THEN
        v_risk_score := v_risk_score + 15;
        v_risk_factors := array_append(v_risk_factors, 'medium_amount');
    END IF;
    
    -- Frequency-based risk
    SELECT COUNT(*)
    INTO v_recent_transactions
    FROM financial_transactions
    WHERE authorized_by = p_user_id
    AND created_at > NOW() - INTERVAL '1 hour';
    
    IF v_recent_transactions > 10 THEN
        v_risk_score := v_risk_score + 25;
        v_risk_factors := array_append(v_risk_factors, 'high_frequency');
    END IF;
    
    -- High-value transaction pattern
    SELECT COUNT(*)
    INTO v_high_value_count
    FROM financial_transactions
    WHERE authorized_by = p_user_id
    AND amount > 10000
    AND created_at > NOW() - INTERVAL '24 hours';
    
    IF v_high_value_count > 5 THEN
        v_risk_score := v_risk_score + 20;
        v_risk_factors := array_append(v_risk_factors, 'high_value_pattern');
    END IF;
    
    -- Determine risk level
    IF v_risk_score >= 70 THEN
        v_risk_level := 'critical';
    ELSIF v_risk_score >= 50 THEN
        v_risk_level := 'high';
    ELSIF v_risk_score >= 30 THEN
        v_risk_level := 'medium';
    ELSE
        v_risk_level := 'low';
    END IF;
    
    -- Log fraud detection
    INSERT INTO fraud_detection_logs (
        transaction_id,
        risk_score,
        risk_level,
        risk_factors,
        detection_algorithm,
        manual_review_required
    ) VALUES (
        p_transaction_id,
        v_risk_score,
        v_risk_level,
        v_risk_factors,
        'rule_based_v1',
        v_risk_score >= 50
    );
    
    RETURN QUERY SELECT v_risk_score, v_risk_level, v_risk_factors, v_risk_score >= 50;
END;
$$ LANGUAGE plpgsql;

-- Create view for compliance monitoring
CREATE VIEW compliance_dashboard AS
SELECT 
    DATE(created_at) as metric_date,
    'sox_compliance' as metric_type,
    COUNT(*) as total_financial_activities,
    COUNT(CASE WHEN amount >= 10000 THEN 1 END) as high_value_transactions,
    COUNT(CASE WHEN dual_authorization_used THEN 1 END) as dual_authorization_usage,
    COUNT(CASE WHEN management_approval_used THEN 1 END) as management_approval_usage,
    COUNT(CASE WHEN risk_level = 'high' OR risk_level = 'critical' THEN 1 END) as high_risk_transactions,
    SUM(amount) as total_transaction_amount,
    AVG(amount) as average_transaction_amount
FROM financial_transactions
WHERE created_at >= CURRENT_DATE - INTERVAL '30 days'
GROUP BY DATE(created_at)
ORDER BY metric_date DESC;

-- Create view for audit trail
CREATE VIEW audit_trail AS
SELECT 
    al.created_at,
    u.email as user_email,
    al.action,
    al.resource_type,
    al.resource_id,
    al.financial_impact,
    al.control_activity,
    al.segregation_of_duties_violation,
    al.ip_address,
    al.details
FROM audit.financial_audit_logs al
JOIN users u ON al.user_id = u.id
WHERE al.created_at >= CURRENT_DATE - INTERVAL '90 days'
ORDER BY al.created_at DESC;

-- Insert default SOX controls
INSERT INTO sox_controls (control_id, control_name, control_description, control_type, control_category, threshold_amount, requires_dual_authorization, requires_management_approval) VALUES
('SOX-001', 'Dual Authorization for High-Value Transactions', 'Requires dual authorization for transactions over $10,000', 'preventive', 'authorization', 10000.00, TRUE, FALSE),
('SOX-002', 'Management Approval for Very High-Value Transactions', 'Requires management approval for transactions over $50,000', 'preventive', 'authorization', 50000.00, FALSE, TRUE),
('SOX-003', 'Segregation of Duties', 'Ensures no single person can complete high-value transactions', 'preventive', 'segregation', NULL, TRUE, FALSE),
('SOX-004', 'Transaction Monitoring', 'Monitors all financial transactions for anomalies', 'detective', 'monitoring', NULL, FALSE, FALSE),
('SOX-005', 'Audit Trail Maintenance', 'Maintains comprehensive audit trail for all financial activities', 'detective', 'documentation', NULL, FALSE, FALSE);

-- Create RLS (Row Level Security) policies for data protection
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE financial_accounts ENABLE ROW LEVEL SECURITY;
ALTER TABLE financial_transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE payment_tokens ENABLE ROW LEVEL SECURITY;

-- Users can only see their own data
CREATE POLICY users_own_data ON users
    FOR ALL TO authenticated
    USING (id = current_setting('app.current_user_id')::UUID);

CREATE POLICY accounts_own_data ON financial_accounts
    FOR ALL TO authenticated
    USING (user_id = current_setting('app.current_user_id')::UUID);

CREATE POLICY transactions_own_data ON financial_transactions
    FOR ALL TO authenticated
    USING (authorized_by = current_setting('app.current_user_id')::UUID);

CREATE POLICY tokens_own_data ON payment_tokens
    FOR ALL TO authenticated
    USING (user_id = current_setting('app.current_user_id')::UUID);

-- Managers and admins can see all data
CREATE POLICY managers_see_all ON financial_accounts
    FOR ALL TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE id = current_setting('app.current_user_id')::UUID 
            AND role IN ('manager', 'admin')
        )
    );

CREATE POLICY managers_see_all_transactions ON financial_transactions
    FOR ALL TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE id = current_setting('app.current_user_id')::UUID 
            AND role IN ('manager', 'admin')
        )
    );

-- Auditors can see all data
CREATE POLICY auditors_see_all ON financial_accounts
    FOR ALL TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE id = current_setting('app.current_user_id')::UUID 
            AND role = 'auditor'
        )
    );

CREATE POLICY auditors_see_all_transactions ON financial_transactions
    FOR ALL TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE id = current_setting('app.current_user_id')::UUID 
            AND role = 'auditor'
        )
    );

-- Grant necessary permissions
GRANT USAGE ON SCHEMA financial TO authenticated;
GRANT USAGE ON SCHEMA audit TO authenticated;
GRANT ALL ON ALL TABLES IN SCHEMA financial TO authenticated;
GRANT ALL ON ALL TABLES IN SCHEMA audit TO authenticated;
GRANT ALL ON ALL SEQUENCES IN SCHEMA financial TO authenticated;
GRANT ALL ON ALL SEQUENCES IN SCHEMA audit TO authenticated;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO authenticated;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA financial TO authenticated;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA audit TO authenticated;

-- Create comments for documentation
COMMENT ON SCHEMA financial IS 'Financial data schema with SOX and PCI DSS compliance';
COMMENT ON SCHEMA audit IS 'Audit trail schema for SOX compliance monitoring';

COMMENT ON TABLE users IS 'User accounts with SOX compliance controls and access management';
COMMENT ON TABLE financial_accounts IS 'Financial accounts with SOX authorization controls';
COMMENT ON TABLE financial_transactions IS 'Financial transactions with comprehensive SOX and PCI compliance';
COMMENT ON TABLE payment_tokens IS 'PCI DSS compliant payment token storage';
COMMENT ON TABLE audit.financial_audit_logs IS 'Comprehensive audit trail for SOX compliance';
COMMENT ON TABLE sox_controls IS 'SOX compliance controls configuration';
COMMENT ON TABLE dual_authorization_requests IS 'Dual authorization workflow management';
COMMENT ON TABLE management_approval_requests IS 'Management approval workflow management';
COMMENT ON TABLE fraud_detection_logs IS 'Fraud detection and risk management logs';
COMMENT ON TABLE compliance_metrics IS 'Compliance monitoring and reporting metrics';
