---
alwaysApply: true
description: "TAGS: [workflow,process,development] | TRIGGERS: workflow,process,development | SCOPE: healthtech-demo | DESCRIPTION: Development workflow and process rules"
---

# Project Workflow Rules: healthtech-demo

## Development Process

### Task Management
1. **Task Creation**
   - All work must have a corresponding ticket
   - Clear acceptance criteria required
   - Estimate effort in story points

2. **Task Lifecycle**
   - `TODO` → `IN PROGRESS` → `REVIEW` → `DONE`
   - Update status in real-time
   - Add blockers immediately

### Git Workflow
1. **Branching**
   ```bash
   # Feature branch
   git checkout -b feature/TICKET-description
   
   # Bugfix branch
   git checkout -b bugfix/TICKET-description
   
   # Hotfix branch
   git checkout -b hotfix/TICKET-description
   ```

2. **Commit Messages**
   ```
   type(scope): subject
   
   body
   
   footer
   ```
   Types: feat, fix, docs, style, refactor, test, chore

3. **Pull Request Template**
   ```markdown
   ## Description
   Brief description of changes
   
   ## Type of Change
   - [ ] Bug fix
   - [ ] New feature
   - [ ] Breaking change
   
   ## Testing
   - [ ] Unit tests pass
   - [ ] Integration tests pass
   - [ ] Manual testing completed
   
   ## Checklist
   - [ ] Code follows style guidelines
   - [ ] Self-review completed
   - [ ] Documentation updated
   - [ ] No sensitive data exposed
   ```

### Code Review Process
1. **Review Criteria**
   - Functionality correctness
   - Code quality and style
   - Performance implications
   - Security considerations
   - Test coverage

2. **Review Feedback**
   - Use constructive language
   - Suggest specific improvements
   - Acknowledge good practices
   - Ask questions for clarity

### Deployment Pipeline
1. **Development Environment**
   - Auto-deploy on commit to develop
   - Run smoke tests
   - Send deployment notifications

2. **Staging Environment**
   - Deploy release candidates
   - Run full test suite
   - Performance testing
   - Security scanning

3. **Production Environment**
   - Require approval from tech lead
   - Blue-green deployment
   - Health checks
   - Rollback plan ready

## Quality Standards

### Testing Requirements
- Unit Tests: >80% coverage
- Integration Tests: All API endpoints
- E2E Tests: Critical user journeys
- Performance Tests: Load and stress testing

### Documentation Standards
1. **Code Documentation**
   - JSDoc/docstrings for public APIs
   - Inline comments for complex logic
   - README for each module

2. **Project Documentation**
   - Architecture decisions (ADRs)
   - API documentation (OpenAPI)
   - Deployment guides
   - Troubleshooting guides

### Performance Standards
- Page Load: <3s
- API Response: <500ms
- Error Rate: <0.1%
- Uptime: >99.99%

## Communication

### Daily Standups
- What I did yesterday
- What I'm doing today
- Any blockers
- Keep it under 2 minutes

### Sprint Ceremonies
1. **Sprint Planning**
   - Review backlog
   - Estimate stories
   - Commit to sprint goal

2. **Sprint Review**
   - Demo completed work
   - Gather stakeholder feedback
   - Update product backlog

3. **Retrospective**
   - What went well
   - What could improve
   - Action items

### Escalation Path
1. Technical Issues → Tech Lead
2. Product Questions → Product Owner
3. Resource Conflicts → Project Manager
4. Security Concerns → Security Team

## Monitoring and Alerts

### Application Monitoring
- Error tracking (Sentry/Rollbar)
- Performance monitoring (New Relic/DataDog)
- Uptime monitoring (Pingdom/UptimeRobot)
- Custom business metrics

### Alert Configuration
1. **Critical Alerts** (immediate)
   - Service down
   - Security breach
   - Data loss risk

2. **Warning Alerts** (within 1 hour)
   - Performance degradation
   - High error rate
   - Resource exhaustion

3. **Info Alerts** (daily digest)
   - Deployment notifications
   - Scheduled job results
   - Usage statistics
