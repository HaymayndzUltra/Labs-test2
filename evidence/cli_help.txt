usage: generate_client_project.py [-h] --name NAME
                                  --industry {healthcare,finance,ecommerce,saas,enterprise}
                                  --project-type {web,mobile,api,fullstack,microservices}
                                  [--frontend {nextjs,nuxt,angular,expo,none}]
                                  [--backend {fastapi,django,nestjs,go,none}]
                                  [--nestjs-orm {typeorm,prisma}]
                                  [--database {postgres,mongodb,firebase,none}]
                                  [--auth {auth0,firebase,cognito,custom,none}]
                                  [--deploy {aws,azure,gcp,vercel,self-hosted}]
                                  [--features FEATURES]
                                  [--compliance COMPLIANCE]
                                  [--output-dir OUTPUT_DIR] [--dry-run]
                                  [--interactive] [--verbose] [--no-git]
                                  [--no-install] [--force]
                                  [--config-out CONFIG_OUT] [--yes]
                                  [--include-cursor-assets]
                                  [--no-cursor-assets]
                                  [--include-project-rules]
                                  [--rules-mode {auto,minimal,none}]
                                  [--rules-manifest RULES_MANIFEST]
                                  [--minimal-cursor] [--workers WORKERS]
                                  [--skip-system-checks] [--list-templates]
                                  [--category {test,example,demo,archived}]

Generate industry-specific client projects with compliance support

options:
  -h, --help            show this help message and exit
  --name NAME           Client/project name (e.g., acme-health)
  --industry {healthcare,finance,ecommerce,saas,enterprise}
                        Industry vertical
  --project-type {web,mobile,api,fullstack,microservices}
                        Type of project
  --frontend {nextjs,nuxt,angular,expo,none}
                        Frontend framework
  --backend {fastapi,django,nestjs,go,none}
                        Backend framework
  --nestjs-orm {typeorm,prisma}
                        Select ORM for NestJS backend (typeorm | prisma)
  --database {postgres,mongodb,firebase,none}
                        Database technology
  --auth {auth0,firebase,cognito,custom,none}
                        Authentication provider
  --deploy {aws,azure,gcp,vercel,self-hosted}
                        Deployment target
  --features FEATURES   Comma-separated list of additional features
  --compliance COMPLIANCE
                        Comma-separated compliance requirements
                        (hipaa,gdpr,sox,pci)
  --output-dir, -o OUTPUT_DIR
                        Output directory for generated project (default:
                        current directory)
  --dry-run             Show what would be generated without creating files
  --interactive, -i     Run in interactive mode for missing options
  --verbose, -v         Enable verbose output
  --no-git              Skip git repository initialization
  --no-install          Skip dependency installation
  --force               Overwrite existing target directory if it exists
                        (idempotent)
  --config-out CONFIG_OUT
                        Path to write resolved generator config as JSON
                        (default: ./generator-config.json)
  --yes                 Proceed without interactive confirmation (non-
                        interactive mode)
  --include-cursor-assets, --ai-governor
                        Include .cursor assets (rules, tools) in the generated
                        project even if a root .cursor exists
  --no-cursor-assets    Do not emit .cursor assets (rules, tools) into the
                        generated project
  --include-project-rules
                        Include a minimal set of project rules for the chosen
                        stack (e.g., nextjs/typescript, fastapi/python). If
                        needed, this will implicitly enable --include-cursor-
                        assets.
  --rules-mode {auto,minimal,none}
                        Rule inclusion mode: auto/minimal includes stack-
                        specific rules by default; none skips project rules
                        entirely.
  --rules-manifest RULES_MANIFEST
                        Path to JSON file listing project rule filenames to
                        include (overrides --include-project-rules and
                        --rules-mode).
  --minimal-cursor      Emit only minimal .cursor assets (project.json and
                        selected rules). Skips dev-workflow and tools.
  --workers WORKERS     Number of worker threads for template processing
                        (0=auto)
  --skip-system-checks  Allow generation even if system deps (e.g., Docker)
                        are not available
  --list-templates      List available templates and exit
  --category {test,example,demo,archived}
                        Category for the generated project
                        (test/example/demo/archived)

Examples:
  # Healthcare web application
  generate_client_project.py --name acme-health --industry healthcare --project-type web \
           --frontend nextjs --backend fastapi --database postgres \
           --auth auth0 --deploy aws --compliance hipaa

  # Financial API service
  generate_client_project.py --name fintech-api --industry finance --project-type api \
           --backend go --database postgres --auth cognito \
           --deploy azure --compliance sox,pci

  # E-commerce mobile app
  generate_client_project.py --name shop-mobile --industry ecommerce --project-type mobile \
           --frontend expo --backend django --database mongodb \
           --auth firebase --deploy gcp
        
