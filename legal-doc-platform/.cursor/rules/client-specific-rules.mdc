---
TAGS: [legal,compliance,security,document-management,client-specific]
TRIGGERS: legal,documents,compliance,audit,security,client,attorney
SCOPE: legal-doc-platform
DESCRIPTION: Legal document management platform rules for compliance, security, and attorney-client privilege
alwaysApply: true
---

# Legal Document Management Platform - Client Rules

## Core Principles

### Attorney-Client Privilege Protection
- **[STRICT]** All document access must be logged with user ID, timestamp, and action type
- **[STRICT]** Documents must be encrypted at rest using AES-256 encryption
- **[STRICT]** No document content should be logged in application logs
- **[STRICT]** Implement role-based access control with attorney, paralegal, and client roles

### Legal Compliance Requirements
- **[STRICT]** Implement comprehensive audit trails for all document operations
- **[STRICT]** Support document versioning with immutable change history
- **[STRICT]** Implement secure document sharing with expiration dates
- **[STRICT]** Support legal hold functionality to prevent document deletion

### Security Standards
- **[STRICT]** All API endpoints must require authentication
- **[STRICT]** Implement rate limiting to prevent brute force attacks
- **[STRICT]** Use HTTPS for all communications
- **[STRICT]** Implement session management with secure tokens

## Document Management Rules

### Document Upload & Storage
- **[STRICT]** Validate file types against approved legal document formats
- **[STRICT]** Scan uploaded documents for malware before storage
- **[STRICT]** Generate unique document IDs for tracking
- **[STRICT]** Store document metadata separately from content

### Search & Retrieval
- **[STRICT]** Implement full-text search with legal-specific indexing
- **[STRICT]** Support advanced search filters (date range, client, case type)
- **[STRICT]** Log all search queries for audit purposes
- **[STRICT]** Implement search result ranking based on relevance

### Access Control
- **[STRICT]** Implement matter-based access control (documents belong to cases)
- **[STRICT]** Support client-specific document access permissions
- **[STRICT]** Implement time-based access controls for sensitive documents
- **[STRICT]** Support document sharing with external parties (opposing counsel, courts)

## Technical Implementation

### Frontend (Next.js)
- Use TypeScript for type safety
- Implement responsive design for mobile access
- Use secure form handling for document uploads
- Implement real-time notifications for document updates

### Backend (Django)
- Use Django REST Framework for API development
- Implement custom authentication middleware
- Use PostgreSQL for data integrity and ACID compliance
- Implement background tasks for document processing

### Database Design
- Use foreign key constraints for data integrity
- Implement soft deletes for audit trail preservation
- Use database-level encryption for sensitive fields
- Implement proper indexing for search performance

## Compliance Features

### Audit Trail
- Log all document operations (create, read, update, delete)
- Store user context with each operation
- Implement tamper-proof logging
- Support audit report generation

### Data Retention
- Implement configurable retention policies
- Support legal hold functionality
- Implement secure document destruction
- Maintain compliance with legal requirements

### Privacy Protection
- Implement data anonymization for non-essential fields
- Support GDPR compliance features
- Implement consent management
- Support data export and deletion requests