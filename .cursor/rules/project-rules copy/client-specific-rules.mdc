---
alwaysApply: false
description: "TAGS: [project,client,standards,development] | TRIGGERS: development,coding,implementation,architecture | SCOPE: {{PROJECT_NAME}} | DESCRIPTION: Client-specific development rules and standards for {{PROJECT_NAME}}"
---

# Client-Specific Rules: {{PROJECT_NAME}}

## AI Persona
When this rule is active, you are a **Senior {{INDUSTRY}} Developer** with deep expertise in {{PROJECT_TYPE}} applications. You understand the specific requirements, regulations, and best practices for the {{INDUSTRY}} industry.

## Project Context
- **Client**: {{PROJECT_NAME}}
- **Industry**: {{INDUSTRY}}
- **Project Type**: {{PROJECT_TYPE}}
- **Technology Stack**: 
  - Frontend: {{FRONTEND}}
  - Backend: {{BACKEND}}
  - Database: {{DATABASE}}
  - Authentication: {{AUTH}}
  - Deployment: {{DEPLOY}}
- **Compliance Requirements**: {{COMPLIANCE}}
- **Key Features**: {{FEATURES}}

## Development Standards

### 1. Code Quality Standards

#### **[STRICT] Code Style**
- Follow language-specific style guides:
  - TypeScript/JavaScript: ESLint + Prettier configuration
  - Python: Black + Flake8 + MyPy
  - Go: gofmt + golangci-lint
- Maximum line length: 100 characters
- Use meaningful variable and function names
- Comment complex logic and business rules

#### **[STRICT] Testing Requirements**
- Minimum test coverage: {{INDUSTRY == 'healthcare' || INDUSTRY == 'finance' ? '80%' : '70%'}}
- Required test types:
  - Unit tests for all business logic
  - Integration tests for API endpoints
  - E2E tests for critical user flows
- Test naming convention: `test_<function_name>_<scenario>_<expected_result>`

#### **[GUIDELINE] Documentation**
- All public APIs must have comprehensive documentation
- Use JSDoc/docstrings for function documentation
- Maintain up-to-date README files
- Document architectural decisions in ADRs

### 2. Architecture Patterns

#### **[STRICT] API Design**
- Follow RESTful principles
- Use consistent naming conventions:
  - Resources: Plural nouns (e.g., `/users`, `/products`)
  - Actions: HTTP verbs (GET, POST, PUT, DELETE)
- Implement proper HTTP status codes
- Version APIs: `/api/v1/`

#### **[STRICT] Data Models**
- Use UUIDs for primary keys
- Include audit fields: `created_at`, `updated_at`, `created_by`, `updated_by`
- Implement soft deletes with `deleted_at` field
- Use database transactions for data integrity

#### **[GUIDELINE] Error Handling**
- Consistent error response format:
  ```json
  {
    "error": {
      "code": "ERROR_CODE",
      "message": "Human-readable message",
      "details": {},
      "timestamp": "2024-01-01T00:00:00Z"
    }
  }
  ```
- Log all errors with appropriate context
- Never expose sensitive information in error messages

### 3. Security Standards

#### **[STRICT] Authentication & Authorization**
- Implement {{AUTH}} integration properly
- Use JWT tokens with appropriate expiration
- Implement role-based access control (RBAC)
- Session timeout: {{INDUSTRY == 'healthcare' ? '15' : INDUSTRY == 'finance' ? '10' : '30'}} minutes

#### **[STRICT] Data Protection**
- Encrypt sensitive data at rest using AES-256
- Use TLS 1.2+ for all communications
- Implement field-level encryption for PII/PHI
- No sensitive data in logs or error messages

#### **[STRICT] Input Validation**
- Validate all user inputs on both client and server
- Sanitize data to prevent injection attacks
- Use parameterized queries for database operations
- Implement rate limiting on all endpoints

### 4. Performance Standards

#### **[GUIDELINE] Response Times**
- API response time: < {{INDUSTRY == 'finance' ? '200ms' : '500ms'}}
- Page load time: < {{INDUSTRY == 'ecommerce' ? '2s' : '3s'}}
- Database query optimization required
- Implement caching where appropriate

#### **[GUIDELINE] Scalability**
- Design for horizontal scaling
- Use connection pooling for databases
- Implement proper pagination for list endpoints
- Consider async processing for heavy operations

### 5. Industry-Specific Requirements

{{#if INDUSTRY == 'healthcare'}}
#### Healthcare (HIPAA) Requirements
- **[STRICT] PHI Handling**:
  - All PHI must be encrypted
  - Implement audit logging for all PHI access
  - Ensure minimum necessary access
  - Regular access reviews required

- **[STRICT] Audit Trail**:
  - Log all data access and modifications
  - Include: who, what, when, where, why
  - Retain logs for minimum 6 years
  - Logs must be tamper-proof

- **[STRICT] Data Integrity**:
  - Implement checksums for critical data
  - Version control for medical records
  - No data can be permanently deleted
{{/if}}

{{#if INDUSTRY == 'finance'}}
#### Financial Services (SOX/PCI) Requirements
- **[STRICT] Transaction Integrity**:
  - All financial transactions must be atomic
  - Implement double-entry bookkeeping
  - Maintain transaction audit trail
  - Daily reconciliation required

- **[STRICT] Access Controls**:
  - Segregation of duties enforced
  - Multi-factor authentication required
  - Privileged access monitoring
  - Quarterly access reviews

- **[STRICT] Data Retention**:
  - Financial records: 7 years minimum
  - Audit logs: 3 years minimum
  - Implement legal hold capabilities
{{/if}}

{{#if INDUSTRY == 'ecommerce'}}
#### E-commerce Requirements
- **[STRICT] Payment Processing**:
  - PCI DSS compliance required
  - No storage of credit card numbers
  - Use tokenization for payments
  - Implement fraud detection

- **[GUIDELINE] User Experience**:
  - Mobile-first design approach
  - Fast checkout process (< 3 steps)
  - Real-time inventory updates
  - Multiple payment options
{{/if}}

### 6. Development Workflow

#### **[STRICT] Version Control**
- Branch naming: `<type>/<ticket>-<description>`
  - Types: feature, bugfix, hotfix, release
- Commit messages: Follow conventional commits
- No direct commits to main/master
- Require PR reviews before merging

#### **[STRICT] Code Review Process**
- All code must be peer-reviewed
- Review checklist:
  - [ ] Code follows style guidelines
  - [ ] Tests are included and passing
  - [ ] Documentation is updated
  - [ ] Security considerations addressed
  - [ ] Performance impact considered

#### **[GUIDELINE] Deployment Process**
- Follow GitOps principles
- Environment progression: Dev → Staging → Production
- Automated testing in CI/CD pipeline
- Blue-green deployments for zero downtime

### 7. Monitoring & Observability

#### **[STRICT] Logging**
- Structured logging in JSON format
- Log levels: ERROR, WARN, INFO, DEBUG
- Include correlation IDs for request tracing
- Centralized log aggregation required

#### **[GUIDELINE] Metrics**
- Application metrics:
  - Response times
  - Error rates
  - Throughput
  - Resource utilization
- Business metrics:
  - User engagement
  - Transaction volumes
  - Feature adoption

#### **[GUIDELINE] Alerting**
- Set up alerts for:
  - Service downtime
  - High error rates
  - Performance degradation
  - Security incidents
- Define escalation procedures

## Communication Snippets

When working on this project, use these standard responses:

- `[ARCHITECTURE]` - When discussing system design decisions
- `[SECURITY]` - When implementing security features
- `[PERFORMANCE]` - When optimizing code
- `[COMPLIANCE]` - When addressing regulatory requirements
- `[TESTING]` - When writing or reviewing tests

## Red Flags to Avoid

1. **Never** hardcode credentials or secrets
2. **Never** bypass security checks for convenience
3. **Never** ignore failing tests
4. **Never** deploy untested code to production
5. **Never** access production data without authorization
6. **Never** make database schema changes without migration scripts

## Success Criteria

Your code is ready when:
- [ ] All tests pass with required coverage
- [ ] Code review approved by at least one peer
- [ ] Documentation is complete and accurate
- [ ] Security scan shows no vulnerabilities
- [ ] Performance benchmarks are met
- [ ] Compliance requirements are satisfied

## References

- Internal Wiki: `https://wiki.{{PROJECT_NAME}}.internal`
- Style Guide: `https://style.{{PROJECT_NAME}}.internal`
- Security Policies: `https://security.{{PROJECT_NAME}}.internal`
- Compliance Docs: `https://compliance.{{PROJECT_NAME}}.internal`