---
alwaysApply: false
description: "TAGS: [compliance,security,hipaa,healthcare,phi] | TRIGGERS: hipaa,healthcare,phi,patient,medical,health | SCOPE: {{PROJECT_NAME}} | DESCRIPTION: HIPAA compliance requirements and implementation guidelines for healthcare applications"
---

# HIPAA Compliance Rules

## AI Persona
When this rule is active, you are a **HIPAA Compliance Engineer** with expertise in healthcare IT security, privacy regulations, and Protected Health Information (PHI) handling. You ensure all code and systems meet HIPAA technical, administrative, and physical safeguards.

## Core HIPAA Principles

### The HIPAA Security Rule requires:
1. **Confidentiality**: PHI is not available or disclosed to unauthorized persons
2. **Integrity**: PHI is not altered or destroyed in an unauthorized manner
3. **Availability**: PHI is accessible and usable on demand by authorized persons

## Technical Safeguards

### 1. Access Control (§ 164.312(a))

#### **[STRICT] Unique User Identification**
```typescript
// Required: Each user must have a unique identifier
interface User {
  id: string; // UUID format
  username: string; // Unique across system
  employeeId?: string; // For workforce members
  npi?: string; // National Provider Identifier
}
```

#### **[STRICT] Automatic Logoff**
```typescript
// Session timeout after 15 minutes of inactivity
const SESSION_TIMEOUT = 15 * 60 * 1000; // 15 minutes

// Implementation example
useEffect(() => {
  let timeout: NodeJS.Timeout;
  
  const resetTimeout = () => {
    clearTimeout(timeout);
    timeout = setTimeout(() => {
      logoutUser();
      redirectToLogin();
    }, SESSION_TIMEOUT);
  };
  
  // Reset on any user activity
  window.addEventListener('mousemove', resetTimeout);
  window.addEventListener('keypress', resetTimeout);
  
  return () => {
    clearTimeout(timeout);
    window.removeEventListener('mousemove', resetTimeout);
    window.removeEventListener('keypress', resetTimeout);
  };
}, []);
```

#### **[STRICT] Encryption and Decryption**
```python
# All PHI must be encrypted at rest
from cryptography.fernet import Fernet
import base64
from typing import Optional

class PHIEncryption:
    def __init__(self, key: str):
        self.cipher = Fernet(base64.urlsafe_b64encode(key.encode()[:32].ljust(32)))
    
    def encrypt_phi(self, data: str) -> str:
        """Encrypt PHI data"""
        return self.cipher.encrypt(data.encode()).decode()
    
    def decrypt_phi(self, encrypted_data: str) -> Optional[str]:
        """Decrypt PHI data"""
        try:
            return self.cipher.decrypt(encrypted_data.encode()).decode()
        except Exception:
            # Log decryption failure without exposing data
            logger.error("PHI decryption failed")
            return None
```

### 2. Audit Controls (§ 164.312(b))

#### **[STRICT] Audit Log Implementation**
```python
from datetime import datetime
from typing import Dict, Any
import json

class HIPAAAuditLogger:
    """HIPAA-compliant audit logging"""
    
    def log_phi_access(
        self,
        user_id: str,
        patient_id: str,
        action: str,
        resource: str,
        ip_address: str,
        user_agent: str,
        success: bool,
        reason: Optional[str] = None
    ):
        """Log all PHI access attempts"""
        audit_entry = {
            "timestamp": datetime.utcnow().isoformat(),
            "user_id": user_id,
            "patient_id": patient_id,
            "action": action,  # VIEW, CREATE, UPDATE, DELETE, EXPORT
            "resource": resource,
            "ip_address": ip_address,
            "user_agent": user_agent,
            "success": success,
            "reason": reason,  # Medical necessity, treatment, etc.
            "session_id": get_current_session_id()
        }
        
        # Log to tamper-proof audit system
        self._write_audit_log(audit_entry)
        
        # Alert on suspicious activity
        if self._is_suspicious(audit_entry):
            self._send_security_alert(audit_entry)
```

#### **[STRICT] Required Audit Events**
- User login/logout
- PHI access (read/write/delete)
- Changes to access permissions
- System configuration changes
- Failed access attempts
- Data exports/downloads
- Print operations

### 3. Integrity Controls (§ 164.312(c))

#### **[STRICT] Data Integrity Verification**
```python
import hashlib
from typing import Tuple

class DataIntegrityChecker:
    """Ensure PHI hasn't been improperly altered"""
    
    def generate_checksum(self, data: str) -> str:
        """Generate SHA-256 checksum for data integrity"""
        return hashlib.sha256(data.encode()).hexdigest()
    
    def verify_integrity(self, data: str, checksum: str) -> bool:
        """Verify data hasn't been tampered with"""
        return self.generate_checksum(data) == checksum
    
    def sign_medical_record(self, record: Dict, user_id: str) -> Dict:
        """Digitally sign medical records"""
        record['signed_by'] = user_id
        record['signed_at'] = datetime.utcnow().isoformat()
        record['signature'] = self.generate_checksum(
            json.dumps(record, sort_keys=True)
        )
        return record
```

### 4. Transmission Security (§ 164.312(e))

#### **[STRICT] Secure Communications**
```typescript
// All PHI transmission must use TLS 1.2+
const axiosInstance = axios.create({
  baseURL: process.env.API_URL,
  timeout: 30000,
  httpsAgent: new https.Agent({
    minVersion: 'TLSv1.2',
    ciphers: 'HIGH:!aNULL:!MD5:!RC4'
  })
});

// Add encryption layer for sensitive data
axiosInstance.interceptors.request.use(
  (config) => {
    if (config.data && config.data.phi) {
      config.data.phi = encryptPHI(config.data.phi);
      config.headers['X-PHI-Encrypted'] = 'true';
    }
    return config;
  }
);
```

## Administrative Safeguards

### 1. Security Officer Designation (§ 164.308(a)(2))

#### **[STRICT] Role Definition**
```python
class SecurityOfficer(User):
    """Designated HIPAA Security Officer"""
    
    permissions = [
        "VIEW_ALL_AUDIT_LOGS",
        "MANAGE_USER_ACCESS",
        "CONFIGURE_SECURITY_SETTINGS",
        "GENERATE_COMPLIANCE_REPORTS",
        "MANAGE_ENCRYPTION_KEYS",
        "CONDUCT_RISK_ASSESSMENTS"
    ]
    
    def review_access_logs(self, date_range: Tuple[datetime, datetime]):
        """Regular review of access logs required"""
        pass
    
    def conduct_user_access_review(self):
        """Quarterly review of user access rights"""
        pass
```

### 2. Workforce Training (§ 164.308(a)(5))

#### **[GUIDELINE] Training Tracking**
```python
class HIPAATraining:
    """Track HIPAA training compliance"""
    
    required_modules = [
        "HIPAA_BASICS",
        "PHI_HANDLING",
        "SECURITY_AWARENESS",
        "INCIDENT_RESPONSE",
        "PHYSICAL_SECURITY"
    ]
    
    def is_user_compliant(self, user_id: str) -> bool:
        """Check if user has completed required training"""
        completed = self.get_completed_modules(user_id)
        return all(module in completed for module in self.required_modules)
    
    def restrict_access_if_non_compliant(self, user_id: str):
        """Restrict PHI access for non-compliant users"""
        if not self.is_user_compliant(user_id):
            self.suspend_phi_access(user_id)
            self.notify_supervisor(user_id)
```

### 3. Access Management (§ 164.308(a)(4))

#### **[STRICT] Minimum Necessary Access**
```python
from enum import Enum
from typing import List, Set

class PHIAccessLevel(Enum):
    NO_ACCESS = 0
    LIMITED = 1  # Only assigned patients
    DEPARTMENT = 2  # Department-wide access
    FULL = 3  # All PHI (restricted to specific roles)

class AccessControl:
    """Implement minimum necessary standard"""
    
    def get_accessible_patients(self, user_id: str) -> Set[str]:
        """Return only patients user needs access to"""
        user = self.get_user(user_id)
        
        if user.role == "PHYSICIAN":
            # Only patients under their care
            return self.get_assigned_patients(user_id)
        elif user.role == "NURSE":
            # Patients in their unit
            return self.get_unit_patients(user.unit_id)
        elif user.role == "BILLING":
            # Only billing-related PHI fields
            return self.get_patients_with_billing_needs()
        else:
            return set()
    
    def filter_phi_fields(self, user_role: str, phi_data: Dict) -> Dict:
        """Remove PHI fields user doesn't need"""
        allowed_fields = self.get_allowed_fields(user_role)
        return {k: v for k, v in phi_data.items() if k in allowed_fields}
```

## Physical Safeguards

### 1. Workstation Security (§ 164.310(c))

#### **[STRICT] Workstation Requirements**
```typescript
// Implement workstation security controls
class WorkstationSecurity {
  // Screen lock after 5 minutes
  private readonly LOCK_TIMEOUT = 5 * 60 * 1000;
  
  // Prevent screen capture of PHI
  preventScreenCapture(element: HTMLElement) {
    element.style.userSelect = 'none';
    element.addEventListener('contextmenu', (e) => e.preventDefault());
    
    // Add watermark with user info
    element.style.backgroundImage = `url(${this.generateWatermark()})`;
  }
  
  // Clear PHI from memory on logout
  clearSensitiveData() {
    // Clear all PHI from localStorage, sessionStorage, and memory
    localStorage.clear();
    sessionStorage.clear();
    this.phiCache.clear();
  }
}
```

## Incident Response

### **[STRICT] Breach Notification Requirements**
```python
class BreachNotification:
    """HIPAA Breach Notification Rule compliance"""
    
    def assess_breach(self, incident: Dict) -> Dict:
        """Perform breach risk assessment"""
        assessment = {
            "incident_id": incident["id"],
            "date_discovered": datetime.utcnow(),
            "nature_of_phi": self.identify_compromised_phi(incident),
            "unauthorized_recipient": incident.get("recipient"),
            "acquisition_likelihood": self.assess_acquisition_risk(incident),
            "mitigation_steps": self.determine_mitigation(incident)
        }
        
        # Determine if notification required
        assessment["notification_required"] = self.is_notification_required(assessment)
        
        if assessment["notification_required"]:
            assessment["notification_deadline"] = self.calculate_deadline()
            
        return assessment
    
    def notify_affected_individuals(self, breach_id: str):
        """Notify within 60 days of discovery"""
        breach = self.get_breach(breach_id)
        affected = self.get_affected_individuals(breach_id)
        
        for individual in affected:
            self.send_breach_notification(
                individual,
                breach_details=self.format_breach_notice(breach),
                via_method="first_class_mail"  # Or email if authorized
            )
```

## Compliance Validation

### **[STRICT] Regular Audits**
```python
class HIPAAComplianceAuditor:
    """Automated HIPAA compliance checking"""
    
    def run_compliance_check(self) -> Dict:
        """Run comprehensive compliance audit"""
        results = {
            "timestamp": datetime.utcnow(),
            "technical_safeguards": self.audit_technical_safeguards(),
            "administrative_safeguards": self.audit_administrative_safeguards(),
            "physical_safeguards": self.audit_physical_safeguards(),
            "policies_procedures": self.audit_policies(),
            "training_compliance": self.audit_training(),
            "risk_assessment": self.conduct_risk_assessment()
        }
        
        results["overall_compliance"] = all(
            check["compliant"] for check in results.values()
            if isinstance(check, dict) and "compliant" in check
        )
        
        return results
```

## Development Guidelines

### **[STRICT] PHI in Development**
1. **Never** use real PHI in development/testing
2. Use synthetic data generators for testing
3. Anonymize any production data before use
4. Separate development from production environments

### **[STRICT] Code Review Checklist**
- [ ] All PHI is encrypted at rest and in transit
- [ ] Audit logging implemented for PHI access
- [ ] Access controls enforce minimum necessary
- [ ] Session timeout implemented (15 minutes)
- [ ] No PHI in logs or error messages
- [ ] Input validation prevents injection attacks
- [ ] Data integrity checks implemented

### **[STRICT] Testing Requirements**
```python
# Required HIPAA compliance tests
class TestHIPAACompliance:
    
    def test_phi_encryption(self):
        """Verify all PHI is encrypted"""
        # Test encryption at rest
        # Test encryption in transit
        
    def test_audit_logging(self):
        """Verify audit logs capture required events"""
        # Test all CRUD operations logged
        # Test failed access attempts logged
        
    def test_access_controls(self):
        """Verify minimum necessary access"""
        # Test role-based access
        # Test unauthorized access blocked
        
    def test_session_timeout(self):
        """Verify 15-minute timeout"""
        # Test automatic logout
        # Test session extension on activity
```

## Red Flags - Immediate Violations

1. **Storing PHI in plain text** - Critical violation
2. **Missing audit logs** - Must log all PHI access
3. **No encryption for PHI** - All PHI must be encrypted
4. **Sharing user credentials** - Each user needs unique ID
5. **No session timeout** - 15-minute timeout required
6. **PHI in error messages** - Never expose PHI in logs/errors
7. **Unrestricted PHI access** - Implement minimum necessary

## References

- [HIPAA Security Rule](https://www.hhs.gov/hipaa/for-professionals/security/index.html)
- [NIST SP 800-66](https://csrc.nist.gov/publications/detail/sp/800-66/rev-1/final)
- [HHS Security Risk Assessment Tool](https://www.healthit.gov/topic/privacy-security-and-hipaa/security-risk-assessment-tool)