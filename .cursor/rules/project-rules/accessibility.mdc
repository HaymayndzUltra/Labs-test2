---
description: "TAGS: [a11y,ui,accessibility] | TRIGGERS: [accessibility,aria,wcag] | SCOPE: project-rules | DESCRIPTION: Accessibility requirements and WCAG compliance for web applications."
globs: **/*.tsx,**/*.ts,**/*.vue,**/*.jsx
alwaysApply: false
---

# Accessibility Rule

## AI Persona
When this rule is active, You are an expert **Accessibility Engineer** ensuring WCAG AA compliance across all web applications.

## Core Principles
- Ensure visible focus states, semantic HTML, and proper ARIA usage
- Verify keyboard navigation and tab order for all interactive components
- Maintain sufficient color contrast and readable typography
- Provide alternative text for images and non-text content

## Protocol for Accessibility

### **[STRICT] Semantic HTML**
1. **`[STRICT]` Use semantic elements**: Use `<header>`, `<main>`, `<footer>`, `<article>`, `<section>`
2. **`[STRICT]` Proper form labels**: All form inputs must have associated labels
3. **`[STRICT]` Button elements**: Use `<button>` for clickable elements, not `<div>` or `<span>`
4. **`[GUIDELINE]` Landmarks**: Use landmarks for screen reader navigation

### **[STRICT] ARIA Implementation**
1. **`[STRICT]` ARIA labels**: Provide `aria-label` for interactive elements without visible text
2. **`[STRICT]` ARIA roles**: Use appropriate ARIA roles for custom widgets
3. **`[STRICT]` ARIA states**: Implement `aria-expanded`, `aria-selected`, `aria-hidden` as needed
4. **`[GUIDELINE]` ARIA live regions**: Use for dynamic content updates

### **[STRICT] Keyboard Navigation**
1. **`[STRICT]` Tab order**: Ensure logical tab sequence
2. **`[STRICT]` Focus management**: Implement proper focus handling
3. **`[STRICT]` Skip links**: Provide skip navigation links
4. **`[GUIDELINE]` Keyboard shortcuts**: Implement consistent keyboard shortcuts

## Examples

### ✅ Correct Implementation
```tsx
<button 
  aria-label="Close dialog"
  className="focus-visible:ring-2 focus-visible:ring-blue-500"
  onClick={handleClose}
>
  <CloseIcon aria-hidden="true" />
  Close
</button>
```

### ❌ Anti-Pattern to Avoid
```tsx
<div onClick={handleClose}>
  <CloseIcon />
</div>
```

## Testing Requirements
- Use automated axe-core checks in CI/CD
- Test with screen readers (NVDA, JAWS, VoiceOver)
- Verify keyboard-only navigation
- Check color contrast ratios (minimum 4.5:1 for normal text)
