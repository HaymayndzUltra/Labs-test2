---
description: "TAGS: [frontend,ui,component,popular] | TRIGGERS: frontend,ui,component,interface,web,popular,popular,popular | SCOPE: frontend | DESCRIPTION: You are a Senior Front-End Developer and an Expert in ReactJS, NextJS, JavaScript, TypeScript, HTML,..."
alwaysApply: false
---

# Make the API call
result = await client.infer(data=data, files=files)

return PromptResult(**result)
async def infer_with_logs( *, params: Dict[str, Any], logging_callback: Callable[[str], None], api_url: str, override_workflow_api: Dict[str, Any] | None = None, client_id: str, client_secret: str, ): """ Make an inference with real-time logs from the execution prompt

Args:
 api_url (str): The URL to send the request to
 params (dict): The parameter to send to the workflow
 override_workflow_api (dict): Optional override the default workflow_api of the deployment
 logging_callback (Callable[[str], None]): The callback function to handle logging messages

Returns:
 PromptResult: The result of the inference containing outputs and execution details
"""

client = ComfyAPIClient(
 infer_url=api_url,
 client_id=client_id,
 client_secret=client_secret,
)

params_parsed, files = parse_parameters(params)
data = {
 "logs": True,
 "params": json.dumps(params_parsed),
 "workflow_api": json.dumps(override_workflow_api)
 if override_workflow_api
 else None,
}

# Make the API call
result = await client.infer_with_logs(
 data=data,
 files=files,
 logging_callback=logging_callback,
)

if result:
 return PromptResult(**result)
```
FILE: ViewComfy_API/Python/main.py
```python
import asyncio import base64 import json import os from api import infer, infer_with_logs

async def api_examples():

view_comfy_api_url = "<Your_ViewComfy_endpoint>"
client_id = "<Your_ViewComfy_client_id>"
client_secret = "<Your_ViewComfy_client_secret>"

override_workflow_api_path = None # Advanced feature: overwrite default workflow with a new one

# Set parameters
params = {}

params["6-inputs-text"] = "A cat sorcerer"
params["52-inputs-image"] = open("input_folder/input_img.png", "rb")

override_workflow_api = None
if override_workflow_api_path:
 if os.path.exists(override_workflow_api_path): 
 with open(override_workflow_api_path, "r") as f:
 override_workflow_api = json.load(f)
 else:
 print(f"Error: {override_workflow_api_path} does not exist")

def logging_callback(log_message: str):
 print(log_message)

# Call the API and wait for the results
# try:
# prompt_result = await infer(
# api_url=view_comfy_api_url,
# params=params,
# client_id=client_id,
# client_secret=client_secret,
# )
# except Exception as e:
# print("something went wrong calling the api")
# print(f"Error: {e}")
# return

# Call the API and get the logs of the execution in real time
# you can use any function that you want
try:
 prompt_result = await infer_with_logs(
 api_url=view_comfy_api_url,
 params=params,
 logging_callback=logging_callback,
 client_id=client_id,
 client_secret=client_secret,
 override_workflow_api=override_workflow_api,
 )
except Exception as e:
 print("something went wrong calling the api")
 print(f"Error: {e}")
 return

if not prompt_result:
 print("No prompt_result generated")
 return

for file in prompt_result.outputs:
 try: