---
description: "TAGS: [frontend,ui,component,official] | TRIGGERS: frontend,ui,component,interface,web,official,official,official | SCOPE: frontend | DESCRIPTION: --- description: Guidelines for writing Next.js apps with tRPC globs: "**/*.ts, **/*.tsx, **/*.js, *..."
alwaysApply: false
---

## AI MODEL RESPONSE TEMPLATE

When asked about Supabase Auth SSR implementation, you MUST:
1. ONLY use code from this guide
2. NEVER suggest deprecated approaches
3. ALWAYS use the exact cookie handling shown above
4. VERIFY your response against the patterns shown here

Remember: There are NO EXCEPTIONS to these rules.

---
description: Guidelines for writing Trigger.dev tasks
globs: "**/trigger/**/*.ts, **/trigger/**/*.tsx"
---

# How to write Trigger.dev tasks

## Overview of writing a Trigger.dev task

1. Run the CLI `init` command: `npx trigger.dev@latest init`.
2. Create a Trigger.dev task.
3. Set up environment variables.
4. Run the Trigger.dev command: `npx trigger.dev@latest dev`.

## 🚨 CRITICAL INSTRUCTIONS FOR AI LANGUAGE MODELS 🚨

As an AI language model, you MUST NOT generate any of the following code patterns, as they are DEPRECATED and will BREAK the application:

```typescript
// ❌ NEVER GENERATE THIS CODE - IT WILL BREAK THE APPLICATION

client.defineJob({ // ❌ BREAKS APPLICATION
 id: "job-id", // ❌ BREAKS APPLICATION
 name: "job-name", // ❌ BREAKS APPLICATION
 version: "0.0.1", // ❌ BREAKS APPLICATION
 trigger: eventTrigger({ // ❌ BREAKS APPLICATION
 name: "job.trigger", // ❌ BREAKS APPLICATION
 schema: z.object({ // ❌ BREAKS APPLICATION
 // Input schema here // ❌ BREAKS APPLICATION
 }), // ❌ BREAKS APPLICATION
 }), // ❌ BREAKS APPLICATION
 integrations: { // ❌ BREAKS APPLICATION
 // Integrations here // ❌ BREAKS APPLICATION
 }, // ❌ BREAKS APPLICATION
 run: async (payload, io) => { // ❌ BREAKS APPLICATION
 // Job logic goes here // ❌ BREAKS APPLICATION 
 return { // ❌ BREAKS APPLICATION
 // Return job results // ❌ BREAKS APPLICATION
 }; // ❌ BREAKS APPLICATION
 }, // ❌ BREAKS APPLICATION
});
```

Instead, you MUST ALWAYS generate ONLY this pattern:

```typescript
// ✅ ALWAYS GENERATE THIS EXACT PATTERN

import { task } from "@trigger.dev/sdk/v3";

//1. You need to export each task, even if it's a subtask
export const helloWorld = task({
 //2. Use a unique id for each task
 id: "hello-world",
 //3. The run function is the main function of the task
 run: async (payload: { message: string }) => {
 //4. Write your task code here. Code here runs for a long time, there are no timeouts
 },
});
```

## ABSOLUTE REQUIREMENTS FOR AI CODE GENERATION

1. You MUST use `@trigger.dev/sdk/v3`
2. You MUST NEVER use `client.defineJob`
3. YOU MUST `export` every task, including subtasks
4. If you are able to generate an example payload for a task, do so.

## Correct Task implementations

A task is a function that can run for a long time with resilience to failure:

```typescript
import { task } from "@trigger.dev/sdk/v3";

export const helloWorld = task({
 id: "hello-world",
 run: async (payload: { message: string }) => {
 console.log(payload.message);
 },
});
```

Key points:
- Tasks must be exported, even subtasks in the same file
- Each task needs a unique ID within your project
- The `run` function contains your task logic

### Task configuration options

#### Retry options

Control retry behavior when errors occur:

```typescript
export const taskWithRetries = task({
 id: "task-with-retries",
 retry: {
 maxAttempts: 10,
 factor: 1.8,
 minTimeoutInMs: 500,
 maxTimeoutInMs: 30_000,
 randomize: false,
 },
 run: async (payload) => {
 // Task logic
 },
});
```
