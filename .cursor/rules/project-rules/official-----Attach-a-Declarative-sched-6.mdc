---
description: "TAGS: [frontend,ui,component,official] | TRIGGERS: frontend,ui,component,interface,web,official | SCOPE: project-rules | DESCRIPTION: --- description: Guidelines for writing Next.js apps with tRPC globs:"**/*.ts, **/*.tsx, **/*.js, *..."
alwaysApply: false
---

#### onSuccess

Runs when a task succeeds:

```typescript
export const taskWithOnSuccess = task({
 id: "task-with-on-success",
 onSuccess: async (payload, output, { ctx }) => {
 // Handle success
 },
 run: async (payload, { ctx }) => {
 // Task logic
 },
});
```

#### onFailure

Runs when a task fails after all retries:

```typescript
export const taskWithOnFailure = task({
 id: "task-with-on-failure",
 onFailure: async (payload, error, { ctx }) => {
 // Handle failure
 },
 run: async (payload, { ctx }) => {
 // Task logic
 },
});
```

#### handleError

Controls error handling and retry behavior:

```typescript
export const taskWithErrorHandling = task({
 id: "task-with-error-handling",
 handleError: async (error, { ctx }) => {
 // Custom error handling
 },
 run: async (payload, { ctx }) => {
 // Task logic
 },
});
```

Global lifecycle hooks can also be defined in `trigger.config.ts` to apply to all tasks.

## Correct Schedules task (cron) implementations

```typescript
import { schedules } from "@trigger.dev/sdk/v3";

export const firstScheduledTask = schedules.task({
 id: "first-scheduled-task",
 run: async (payload) => {
 //when the task was scheduled to run
 //note this will be slightly different from new Date() because it takes a few ms to run the task
 console.log(payload.timestamp); //is a Date object

//when the task was last run
 //this can be undefined if it's never been run
 console.log(payload.lastTimestamp); //is a Date object or undefined

//the timezone the schedule was registered with, defaults to "UTC"
 //this is in IANA format, e.g. "America/New_York"
 //See the full list here: https://cloud.trigger.dev/timezones
 console.log(payload.timezone); //is a string

//If you want to output the time in the user's timezone do this:
 const formatted = payload.timestamp.toLocaleString("en-US", {
 timeZone: payload.timezone,
 });

//the schedule id (you can have many schedules for the same task)
 //using this you can remove the schedule, update it, etc
 console.log(payload.scheduleId); //is a string

//you can optionally provide an external id when creating the schedule
 //usually you would set this to a userId or some other unique identifier
 //this can be undefined if you didn't provide one
 console.log(payload.externalId); //is a string or undefined

//the next 5 dates this task is scheduled to run
 console.log(payload.upcoming); //is an array of Date objects
 },
});
```

### Attach a Declarative schedule

```typescript
import { schedules } from "@trigger.dev/sdk/v3";

// Sepcify a cron pattern (UTC)
export const firstScheduledTask = schedules.task({
 id: "first-scheduled-task",
 //every two hours (UTC timezone)
 cron: "0 */2 * * *",
 run: async (payload, { ctx }) => {
 //do something
 },
});
```

```typescript
import { schedules } from "@trigger.dev/sdk/v3";

// Specify a specific timezone like this:
export const secondScheduledTask = schedules.task({
 id: "second-scheduled-task",
 cron: {
 //5am every day Tokyo time
 pattern: "0 5 * * *",
 timezone: "Asia/Tokyo",
 },
 run: async (payload) => {},
});
```
