---
description: "TAGS: [frontend,ui,component,official] | TRIGGERS: frontend,ui,component,interface,web,official,official,official | SCOPE: frontend | DESCRIPTION: --- description: Guidelines for writing Next.js apps with tRPC globs: "**/*.ts, **/*.tsx, **/*.js, *..."
alwaysApply: false
---

### Payload-Based Idempotency

While not directly supported, you can implement payload-based idempotency by hashing the payload:

```typescript
import { createHash } from "node:crypto";

const idempotencyKey = await idempotencyKeys.create(hash(payload));
await tasks.trigger("child-task", payload, { idempotencyKey });

function hash(payload: any): string {
 const hash = createHash("sha256");
 hash.update(JSON.stringify(payload));
 return hash.digest("hex");
}
```

### Important Notes

- Idempotency keys are scoped to the task and environment
- Different tasks with the same key will still both run
- Default TTL is 30 days
- Not available with `triggerAndWait` or `batchTriggerAndWait` in v3.3.0+ due to a bug

## Correct Logs implementation

```typescript
// onFailure executes after all retries are exhausted; use for notifications, logging, or side effects on final failure:
import { task, logger } from "@trigger.dev/sdk/v3";

export const loggingExample = task({
 id: "logging-example",
 run: async (payload: { data: Record<string, string> }) => {
 //the first parameter is the message, the second parameter must be a key-value object (Record<string, unknown>)
 logger.debug("Debug message", payload.data);
 logger.log("Log message", payload.data);
 logger.info("Info message", payload.data);
 logger.warn("You've been warned", payload.data);
 logger.error("Error message", payload.data);
 },
});
```

## Correct `trigger.config.ts` implementation 

The `trigger.config.ts` file configures your Trigger.dev project, specifying task locations, retry settings, telemetry, and build options.

```typescript
import { defineConfig } from "@trigger.dev/sdk/v3";

export default defineConfig({
 project: "<project ref>",
 dirs: ["./trigger"],
 retries: {
 enabledInDev: false,
 default: {
 maxAttempts: 3,
 minTimeoutInMs: 1000,
 maxTimeoutInMs: 10000,
 factor: 2,
 randomize: true,
 },
 },
});
```

### Key configuration options

#### Dirs

Specify where your tasks are located:

```typescript
dirs: ["./trigger"],
```

Files with `.test` or `.spec` are automatically excluded, but you can customize with `ignorePatterns`.

#### Lifecycle functions

Add global hooks for all tasks:

```typescript
onStart: async (payload, { ctx }) => {
 console.log("Task started", ctx.task.id);
},
onSuccess: async (payload, output, { ctx }) => {
 console.log("Task succeeded", ctx.task.id);
},
onFailure: async (payload, error, { ctx }) => {
 console.log("Task failed", ctx.task.id);
},
```

#### Telemetry instrumentations

Add OpenTelemetry instrumentations for enhanced logging:

```typescript
telemetry: {
 instrumentations: [
 new PrismaInstrumentation(),
 new OpenAIInstrumentation()
 ],
 exporters: [axiomExporter], // Optional custom exporters
},
```
