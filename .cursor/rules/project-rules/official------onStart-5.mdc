---
description: "TAGS: [frontend,ui,component,official] | TRIGGERS: frontend,ui,component,interface,web,official | SCOPE: project-rules | DESCRIPTION: --- description: Guidelines for writing Next.js apps with tRPC globs:"**/*.ts, **/*.tsx, **/*.js, *..."
alwaysApply: false
---

#### Queue options

Control concurrency:

```typescript
export const oneAtATime = task({
 id: "one-at-a-time",
 queue: {
 concurrencyLimit: 1,
 },
 run: async (payload) => {
 // Task logic
 },
});
```

#### Machine options

Specify CPU/RAM requirements:

```typescript
export const heavyTask = task({
 id: "heavy-task",
 machine: {
 preset: "large-1x", // 4 vCPU, 8 GB RAM
 },
 run: async (payload) => {
 // Task logic
 },
});
```

Machine configuration options:

| Machine name | vCPU | Memory | Disk space |
| ------------------- | ---- | ------ | ---------- |
| micro | 0.25 | 0.25 | 10GB |
| small-1x (default) | 0.5 | 0.5 | 10GB |
| small-2x | 1 | 1 | 10GB |
| medium-1x | 1 | 2 | 10GB |
| medium-2x | 2 | 4 | 10GB |
| large-1x | 4 | 8 | 10GB |
| large-2x | 8 | 16 | 10GB |

#### Max Duration

Limit how long a task can run:

```typescript
export const longTask = task({
 id: "long-task",
 maxDuration: 300, // 5 minutes
 run: async (payload) => {
 // Task logic
 },
});
```

### Lifecycle functions

Tasks support several lifecycle hooks:

#### init

Runs before each attempt, can return data for other functions:

```typescript
export const taskWithInit = task({
 id: "task-with-init",
 init: async (payload, { ctx }) => {
 return { someData: "someValue" };
 },
 run: async (payload, { ctx, init }) => {
 console.log(init.someData); // "someValue"
 },
});
```

#### cleanup

Runs after each attempt, regardless of success/failure:

```typescript
export const taskWithCleanup = task({
 id: "task-with-cleanup",
 cleanup: async (payload, { ctx }) => {
 // Cleanup resources
 },
 run: async (payload, { ctx }) => {
 // Task logic
 },
});
```

#### onStart

Runs once when a task starts (not on retries):

```typescript
export const taskWithOnStart = task({
 id: "task-with-on-start",
 onStart: async (payload, { ctx }) => {
 // Send notification, log, etc.
 },
 run: async (payload, { ctx }) => {
 // Task logic
 },
});
```
