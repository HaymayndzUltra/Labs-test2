---
description: "TAGS: [frontend,ui,component,official] | TRIGGERS: frontend,ui,component,interface,web,official | SCOPE: project-rules | DESCRIPTION: --- description: Guidelines for writing Next.js apps with tRPC globs:"**/*.ts, **/*.tsx, **/*.js, *..."
alwaysApply: false
---

## CORRECT MIDDLEWARE IMPLEMENTATION

```typescript
import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function middleware(request: NextRequest) {
 let supabaseResponse = NextResponse.next({
 request,
 })

const supabase = createServerClient(
 process.env.NEXT_PUBLIC_SUPABASE_URL!,
 process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
 {
 cookies: {
 getAll() {
 return request.cookies.getAll()
 },
 setAll(cookiesToSet) {
 cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))
 supabaseResponse = NextResponse.next({
 request,
 })
 cookiesToSet.forEach(({ name, value, options }) =>
 supabaseResponse.cookies.set(name, value, options)
 )
 },
 },
 }
 )

// Do not run code between createServerClient and
 // supabase.auth.getUser(). A simple mistake could make it very hard to debug
 // issues with users being randomly logged out.

// IMPORTANT: DO NOT REMOVE auth.getUser()

const {
 data: { user },
 } = await supabase.auth.getUser()

if (
 !user &&
 !request.nextUrl.pathname.startsWith('/login') &&
 !request.nextUrl.pathname.startsWith('/auth')
 ) {
 // no user, potentially respond by redirecting the user to the login page
 const url = request.nextUrl.clone()
 url.pathname = '/login'
 return NextResponse.redirect(url)
 }

// IMPORTANT: You *must* return the supabaseResponse object as it is.
 // If you're creating a new response object with NextResponse.next() make sure to:
 // 1. Pass the request in it, like so:
 // const myNewResponse = NextResponse.next({ request })
 // 2. Copy over the cookies, like so:
 // myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())
 // 3. Change the myNewResponse object to fit your needs, but avoid changing
 // the cookies!
 // 4. Finally:
 // return myNewResponse
 // If this is not done, you may be causing the browser and server to go out
 // of sync and terminate the user's session prematurely!

return supabaseResponse
}

export const config = {
 matcher: [
 /*
 * Match all request paths except for the ones starting with:
 * - _next/static (static files)
 * - _next/image (image optimization files)
 * - favicon.ico (favicon file)
 * Feel free to modify this pattern to include more paths.
 */
 '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
 ],
}
```

## AI MODEL VERIFICATION STEPS

Before generating any code, you MUST verify:

1. Are you using ONLY `getAll` and `setAll`? If not, STOP and FIX.
2. Are you importing from `@supabase/ssr`? If not, STOP and FIX.
3. Do you see ANY instance of `get`, `set`, or `remove`? If yes, STOP and FIX.
4. Are you importing from `auth-helpers-nextjs`? If yes, STOP and FIX.

## CONSEQUENCES OF INCORRECT IMPLEMENTATION

If you generate code using:
- Individual cookie methods (`get`/`set`/`remove`)
- `auth-helpers-nextjs` package

The implementation will:
1. Break in production
2. Fail to maintain session state
3. Cause authentication loops
4. Result in security vulnerabilities
