---
description: "TAGS: [frontend,ui,component,official] | TRIGGERS: frontend,ui,component,interface,web,official,official,official | SCOPE: frontend | DESCRIPTION: --- description: Guidelines for writing Next.js apps with tRPC globs: "**/*.ts, **/*.tsx, **/*.js, *..."
alwaysApply: false
---

#### Runtime

Specify the runtime environment:

```typescript
runtime: "node", // or "bun" (experimental)
```

#### Machine settings

Set default machine for all tasks:

```typescript
defaultMachine: "large-1x",
```

#### Log level

Configure logging verbosity:

```typescript
logLevel: "debug", // Controls logger API logs
```

#### Max Duration

Set default maximum runtime for all tasks:

```typescript
maxDuration: 60, // 60 seconds
```

### Build configuration

Customize the build process:

```typescript
build: {
 external: ["header-generator"], // Don't bundle these packages
 jsx: {
 fragment: "Fragment",
 factory: "h",
 automatic: false,
 },
 conditions: ["react-server"], // Import conditions
 extensions: [
 // Build extensions
 additionalFiles({ files: ["./assets/**", "./fonts/**"] }),
 additionalPackages({ packages: ["wrangler"] }),
 aptGet({ packages: ["ffmpeg"] }),
 ],
}
```

### Build Extensions

Trigger.dev provides several built-in extensions:

- **additionalFiles**: Copy files to the build directory
- **additionalPackages**: Include extra packages in the build
- **aptGet**: Install system packages in the deployed image
- **emitDecoratorMetadata**: Enable TypeScript decorator metadata
- **prismaExtension**: Support for Prisma ORM
- **syncEnvVars**: Sync environment variables
- **puppeteer**: Add Puppeteer support
- **ffmpeg**: Add FFmpeg support
- **esbuildPlugin**: Add custom esbuild plugins

You can also create custom build extensions with hooks like `onBuildStart`, `onBuildComplete`, and `externalsForTarget`.

#### Key points:

- Validates payload at trigger time and before execution
- Supports Zod, Yup, Superstruct, ArkType, Effect/schema, runtypes, valibot, typebox
- Can use input/output schemas (e.g., defaults, type coercion)
- Custom parser functions supported
- Invalid payloads throw errors and prevent task execution

#### Trigger with:

```typescript
await myTask.trigger({ name: "Alice", age: 30 });
```

## AI MODEL VERIFICATION STEPS

Before generating any code, you MUST verify:

1. Are you importing from `@trigger.dev/sdk/v3`? If not, STOP and FIX.
2. Have you exported every task? If not, STOP and FIX.
3. Have you generated any DEPRECATED code patterns? If yes, STOP and FIX.

## CONSEQUENCES OF INCORRECT IMPLEMENTATION

If you generate code that fails the verification steps above, your implementation will:

1. Break in production
2. Fail to deploy to the Trigger.dev servers
3. Fail to run in a local Dev environment

## AI MODEL RESPONSE TEMPLATE

When asked about Trigger.dev task implementation, you MUST:
1. FIRST use code patterns from this guide
2. NEVER suggest deprecated approaches
3. VERIFY your response against the patterns shown here
4. If an answer cannot be found using this guide, look up further information ONLY from the official LLM-friendly version of the [Trigger.dev docs site](https://trigger.dev/docs/llms.txt).