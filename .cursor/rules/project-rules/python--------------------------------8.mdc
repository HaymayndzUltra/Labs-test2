---
description: "TAGS: [language,programming,python] | TRIGGERS: programming,language,syntax,python | SCOPE: project-rules | DESCRIPTION: You are an expert in data analysis, visualization, and Jupyter Notebook development, with a focus on..."
alwaysApply: false
---

 # Decode the base64 data before writing to file
 binary_data = base64.b64decode(file.data)
 with open(file.filename, "wb") as f:
 f.write(binary_data)
 print(f"Successfully saved {file.filename}")
 except Exception as e:
 print(f"Error saving {file.filename}: {str(e)}")
if name == "main": asyncio.run(api_examples())
```

================================================ 
FILE: ViewComfy_API/Python/requirements.txt
```
httpx==0.28.1
```

================================================ 
FILE: ViewComfy_API/Python/workflow_api_parameter_creator.py
```python
from typing import Dict, Any

def workflow_api_parameters_creator(workflow: Dict[str, Dict[str, Any]]) -> Dict[str, Any]: """ Flattens the workflow API JSON structure into a simple key-value object

Args:
 workflow: The workflow API JSON object

Returns:
 A flattened object with keys in the format "nodeId-inputs-paramName" or "nodeId-class_type-info"
"""
flattened: Dict[str, Any] = {}

# Iterate through each node in the workflow
for node_id, node in workflow.items():
 # Add the class_type-info key, preferring _meta.title if available
 class_type_info = node.get("_meta", {}).get("title") or node.get("class_type")
 flattened[f"_{node_id}-node-class_type-info"] = class_type_info

# Process all inputs
 if "inputs" in node:
 for input_key, input_value in node["inputs"].items():
 flattened[f"{node_id}-inputs-{input_key}"] = input_value

return flattened
""" Example usage:

import json

with open('workflow_api.json', 'r') as f: workflow_json = json.load(f)

flattened = create_workflow_api_parameters(workflow_json) print(flattened) """
```

================================================ 
FILE: ViewComfy_API/Python/workflow_parameters_maker.py
```python
import json from workflow_api_parameter_creator import workflow_api_parameters_creator import argparse

parser = argparse.ArgumentParser(description='Process workflow API parameters') parser.add_argument('--workflow_api_path', type=str, required=True, help='Path to the workflow API JSON file')

Parse arguments
args = parser.parse_args()

with open(args.workflow_api_path, 'r') as f: workflow_json = json.load(f)

parameters = workflow_api_parameters_creator(workflow_json)

with open('workflow_api_parameters.json', 'w') as f: json.dump(parameters, f, indent=4)
```