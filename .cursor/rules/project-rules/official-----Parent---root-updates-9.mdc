---
description: "TAGS: [frontend,ui,component,official] | TRIGGERS: frontend,ui,component,interface,web,official | SCOPE: project-rules | DESCRIPTION: --- description: Guidelines for writing Next.js apps with tRPC globs:"**/*.ts, **/*.tsx, **/*.js, *..."
alwaysApply: false
---

### batch.triggerByTask()

Batch triggers multiple tasks by passing task instances, useful for static task sets.

```typescript
export const parentTask = task({
 id: "parent-task",
 run: async (payload: string) => {
 const results = await batch.triggerByTask([
 { task: childTask1, payload: { foo: "World" } },
 { task: childTask2, payload: { bar: 42 } },
 ]);

const run1 = await runs.retrieve(results.runs[0]);
 const run2 = await runs.retrieve(results.runs[1]);
 },
});
```

### batch.triggerByTaskAndWait()

Batch triggers multiple tasks by passing task instances and waits for all results.

```typescript
export const parentTask = task({
 id: "parent-task",
 run: async (payload: string) => {
 const { runs } = await batch.triggerByTaskAndWait([
 { task: childTask1, payload: { foo: "World" } },
 { task: childTask2, payload: { bar: 42 } },
 ]);

if (runs[0].ok) {
 console.log("Child task 1 output", runs[0].output);
 }

if (runs[1].ok) {
 console.log("Child task 2 output", runs[1].output);
 }
 },
});
```

## Correct Metadata implementation

### Overview

Metadata allows attaching up to 256KB of structured data to a run, which can be accessed during execution, via API, Realtime, and in the dashboard. Useful for storing user information, tracking progress, or saving intermediate results.

### Basic Usage

Add metadata when triggering a task:

```typescript
const handle = await myTask.trigger(
 { message: "hello world" },
 { metadata: { user: { name: "Eric", id: "user_1234" } } }
);
```

Access metadata inside a run:

```typescript
import { task, metadata } from "@trigger.dev/sdk/v3";

export const myTask = task({
 id: "my-task",
 run: async (payload: { message: string }) => {
 // Get the whole metadata object
 const currentMetadata = metadata.current();

// Get a specific key
 const user = metadata.get("user");
 console.log(user.name); // "Eric"
 },
});
```

### Update methods

Metadata can be updated as the run progresses:

- **set**: `metadata.set("progress", 0.5)`
- **del**: `metadata.del("progress")`
- **replace**: `metadata.replace({ user: { name: "Eric" } })`
- **append**: `metadata.append("logs", "Step 1 complete")`
- **remove**: `metadata.remove("logs", "Step 1 complete")`
- **increment**: `metadata.increment("progress", 0.4)`
- **decrement**: `metadata.decrement("progress", 0.4)`
- **stream**: `await metadata.stream("logs", readableStream)`
- **flush**: `await metadata.flush()`

Updates can be chained with a fluent API:

```typescript
metadata.set("progress", 0.1)
 .append("logs", "Step 1 complete")
 .increment("progress", 0.4);
```

### Parent & root updates

Child tasks can update parent task metadata:

```typescript
export const childTask = task({
 id: "child-task",
 run: async (payload: { message: string }) => {
 // Update parent task's metadata
 metadata.parent.set("progress", 0.5);

// Update root task's metadata
 metadata.root.set("status", "processing");
 },
});
```
