---
description: "TAGS: [planning,automation,dag] | TRIGGERS: PLAN,RUN_BE,RUN_FE,CSAN,QA,PR,STATUS | SCOPE: project-rules | DESCRIPTION: Generate FE/BE plan artifacts (PLAN.md + tasks.json) from a brief; no deploy."
alwaysApply: false
---

# FE/BE Plan Orchestrator (PLAN trigger)

## Purpose
- Sa isang trigger (PLAN), bumuo ng kumpletong plano mula sa `brief.md`:
  - `PLAN.md` (readable): FE/BE lanes (ordered), dependencies (DAG), Blocking vs Independent, conflicts+mitigations, per-task acceptance, Next Triggers
  - `tasks.json` (machine-readable): buong task graph

## Inputs
- `brief.md` (client brief)
- Optional config presets (stack/industry/features)

## Outputs
- `PLAN.md` at `tasks.json` sa napiling path (no deploy, no code edits)

## Triggers
- `PLAN`: basahin ang brief → generate PLAN.md + tasks.json
- `RUN_BE`: isagawa BE lane ayon sa order hanggang milestone/blocker
- `RUN_FE`: isagawa FE lane ayon sa order hanggang milestone/blocker
- `CSAN`: conflict scan + mitigations (resequencing, mocks, feature flags)
- `QA`: tests/lints/coverage para sa completed scope lang
- `PR`: artifacts + acceptance checklist; STOP (no deploy)
- `STATUS`: progress, blocked_on, next allowed triggers

## Bounds & Guardrails
- Walang deploy; bawal secrets sa outputs; ≤3 concurrent per lane
- Ports documented (3000 FE, 8000 BE) at configurable
- Migration lock: iwas sabay na schema change at seed/tests

## Acceptance (PLAN)
- `PLAN.md` may:
  - FE/BE lanes na topologically ordered; Blocking vs Independent
  - Conflicts table + mitigations
  - Per-task acceptance + DoD
  - Next Triggers line
- `tasks.json` valid JSON; fields: id, title, area, estimate, blocked_by[], acceptance[], dod[], labels[], state
- Total tasks ≥ 18 (BE ≥ 9, FE ≥ 9)

## Command (reference)
```
python3 scripts/plan_from_brief.py --brief docs/briefs/project1/brief.md --out PLAN.md
```

## Trigger → Command Map (copy-friendly)

Variables:
- Replace `<project-name>` with your generated name (or auto-derive via brief)
- FE dir: `../_generated/<project-name>-frontend/frontend`
- BE dir: `../_generated/<project-name>-backend/backend`

PLAN
```
python3 scripts/plan_from_brief.py --brief docs/briefs/project1/brief.md --out PLAN.md
```

GENERATE (optional)
```
python3 scripts/generate_from_brief.py --brief docs/briefs/project1/brief.md --output-root ../_generated --force --yes
```

RUN_BE
```
cd ../_generated/<project-name>-backend && python3 -m venv venv && . venv/bin/activate && \
pip3 install -r backend/requirements.txt || true && pip3 install "uvicorn[standard]" "pydantic[email]" email-validator || true && \
cd backend && ../../venv/bin/python3 -m uvicorn main:app --reload --host 0.0.0.0 --port 8000
```

RUN_FE (real API)
```
cd ../_generated/<project-name>-frontend/frontend && \
echo 'NEXT_PUBLIC_API_BASE=http://localhost:8000' > .env.local && \
npx --yes openapi-typescript http://localhost:8000/api/openapi.json -o src/lib/api/types.ts && \
npm ci && npm run dev
```

RUN_FE_MOCK (Prism)
```
cd ../_generated/<project-name>-frontend/frontend && \
npx --yes @stoplight/prism-cli mock http://localhost:8000/api/openapi.json -p 4012 & \
echo 'NEXT_PUBLIC_API_BASE=http://localhost:4012' > .env.local && \
npx --yes openapi-typescript http://localhost:8000/api/openapi.json -o src/lib/api/types.ts && \
npm ci && npm run dev
```

QA
```
cd ../_generated/<project-name>-backend && venv/bin/pytest -q backend
cd ../_generated/<project-name>-frontend/frontend && npm test --silent
for i in {1..10}; do curl -fsS http://localhost:8000/health >/dev/null || exit 1; done && echo "API OK"
```

PR (STOP; no deploy)
```
git checkout -b feature/plan-execution && \
git add PLAN.md PLAN.tasks.json .cursor/rules/project-rules/fe-be-plan.mdc scripts/plan_from_brief.py && \
git commit -m "chore(plan): add PLAN trigger and FE/BE plan artifacts" && \
git push -u origin feature/plan-execution
```

Notes (guardrails):
- Ports: FE 3000/BE 8000 by default; adjust via .env/local
- Deps fallback: RUN_BE installs uvicorn + email-validator if missing
- Mock path: Prism is optional to unblock FE when BE is WIP

