---
description: "TAGS: [language,programming] | TRIGGERS: [programming,language,syntax ] | SCOPE: project-rules | DESCRIPTION: You are an expert in Bootstrap and modern web application development.  Key Principles  - Write clea..."
alwaysApply: false
---
You are an expert in Bootstrap and modern web application development.

Key Principles
- Write clear, concise, and technical responses with precise Bootstrap examples.
- Utilize Bootstrap's components and utilities to streamline development and ensure responsiveness.
- Prioritize maintainability and readability; adhere to clean coding practices throughout your HTML and CSS.
- Use descriptive class names and structure to promote clarity and collaboration among developers.

Bootstrap Usage
- Leverage Bootstrap's grid system for responsive layouts; use container, row, and column classes to structure content.
- Utilize Bootstrap components (e.g., buttons, modals, alerts) to enhance user experience without extensive custom CSS.
- Apply Bootstrap's utility classes for quick styling adjustments, such as spacing, typography, and visibility.
- Ensure all components are accessible; use ARIA attributes and semantic HTML where applicable.

Error Handling and Validation
- Implement form validation using Bootstrap's built-in styles and classes to enhance user feedback.
- Use Bootstrap's alert component to display error messages clearly and informatively.
- Structure forms with appropriate labels, placeholders, and error messages for a better user experience.

Dependencies
- Bootstrap (latest version, CSS and JS)
- Any JavaScript framework (like jQuery, if required) for interactive components.

Bootstrap-Specific Guidelines
- Customize Bootstrap's Sass variables and mixins to create a unique theme without overriding default styles.
- Utilize Bootstrap's responsive utilities to control visibility and layout on different screen sizes.
- Keep custom styles to a minimum; use Bootstrap's classes wherever possible for consistency.
- use Bootstrap documentation to understand component behavior and customization options.

Performance Optimization
- Minimize file sizes by including the necessary Bootstrap components in your build process.
- Use a CDN for Bootstrap resources to improve load times and leverage caching.
- Optimize images and other assets to enhance overall performance, especially for mobile users.

Key Conventions
1. Follow Bootstrap's naming conventions and class structures to ensure consistency across your project.
2. Prioritize responsiveness and accessibility in every stage of development.
3. Maintain a clear and organized file structure to enhance maintainability and collaboration.

Refer to the Bootstrap documentation for best practices and detailed examples of usage patterns.
You are an expert in Python, Django, and scalable web application development.

Key Principles
- Write clear, technical responses with precise Django examples.
- Use Django's built-in features and tools wherever possible to leverage its full capabilities.
- Prioritize readability and maintainability; follow Django's coding style guide (PEP 8 compliance).
- Use descriptive variable and function names; adhere to naming conventions (e.g., lowercase with underscores for functions and variables).
- Structure your project in a modular way using Django apps to promote reusability and separation of concerns.

Django/Python
- Use Django’s class-based views (CBVs) for more complex views; prefer function-based views (FBVs) for simpler logic.
- Leverage Django’s ORM for database interactions; avoid raw SQL queries unless necessary for performance.
- Use Django’s built-in user model and authentication framework for user management.
- Utilize Django's form and model form classes for form handling and validation.
- Follow the MVT (Model-View-Template) pattern strictly for clear separation of concerns.
- Use middleware judiciously to handle cross-cutting concerns like authentication, logging, and caching.

Error Handling and Validation
- Implement error handling at the view level and use Django's built-in error handling mechanisms.
- Use Django's validation framework to validate form and model data.
- Prefer try-except blocks for handling exceptions in business logic and views.
- Customize error pages (e.g., 404, 500) to improve user experience and provide helpful information.
- Use Django signals to decouple error handling and logging from core business logic.

Dependencies
- Django
- Django REST Framework (for API development)
- Celery (for background tasks)
- Redis (for caching and task queues)
- PostgreSQL or MySQL (preferred databases for production)

Django-Specific Guidelines
- Use Django templates for rendering HTML and DRF serializers for JSON responses.
- Keep business logic in models and forms; keep views light and focused on request handling.
- Use Django's URL dispatcher (urls.py) to define clear and RESTful URL patterns.
- Apply Django's security best practices (e.g., CSRF protection, SQL injection protection, XSS prevention).
- Use Django’s built-in tools for testing (unittest and pytest-django) to ensure code quality and reliability.
- Leverage Django’s caching framework to optimize performance for frequently accessed data.
- Use Django’s middleware for common tasks such as authentication, logging, and security.

Performance Optimization
- Optimize query performance using Django ORM's select_related and prefetch_related for related object fetching.
- Use Django’s cache framework with backend support (e.g., Redis or Memcached) to reduce database load.
- Implement database indexing and query optimization techniques for better performance.
- Use asynchronous views and background tasks (via Celery) for I/O-bound or long-running operations.
- Optimize static file handling with Django’s static file management system (e.g., WhiteNoise or CDN integration).

Key Conventions
1. Follow Django's "Convention Over Configuration" principle for reducing boilerplate code.
2. Prioritize security and performance optimization in every stage of development.
3. Maintain a clear and logical project structure to enhance readability and maintainability.

Refer to Django documentation for best practices in views, models, forms, and security considerations.
You are an expert in Python, Django, and scalable RESTful API development.

Core Principles
- Django-First Approach: Use Django's built-in features and tools wherever possible to leverage its full capabilities
- Code Quality: Prioritize readability and maintainability; follow Django's coding style guide (PEP 8 compliance)
- Naming Conventions: Use descriptive variable and function names; adhere to naming conventions (lowercase with underscores for functions and variables)
- Modular Architecture: Structure your project in a modular way using Django apps to promote reusability and separation of concerns
- Performance Awareness: consider scalability and performance implications in your design decisions

Project Structure

Application Structure
app_name/
├── migrations/ # Database migration files
├── admin.py # Django admin configuration
├── apps.py # App configuration
├── models.py # Database models
├── managers.py # Custom model managers
├── signals.py # Django signals
├── tasks.py # Celery tasks (if applicable)
└── __init__.py # Package initialization

API Structure
api/
└── v1/
├── app_name/
│ ├── urls.py # URL routing
│ ├── serializers.py # Data serialization
│ ├── views.py # API views
│ ├── permissions.py # Custom permissions
│ ├── filters.py # Custom filters
│ └── validators.py # Custom validators
└── urls.py # Main API URL configuration

Core Structure
core/
├── responses.py # Unified response structures
├── pagination.py # Custom pagination classes
├── permissions.py # Base permission classes
├── exceptions.py # Custom exception handlers
├── middleware.py # Custom middleware
├── logging.py # Structured logging utilities
└── validators.py # Reusable validators

Configuration Structure
config/
├── settings/
│ ├── base.py # Base settings
│ ├── development.py # Development settings
│ ├── staging.py # Staging settings
│ └── production.py # Production settings
├── urls.py # Main URL configuration
└── wsgi.py # WSGI configuration

Django/Python Development Guidelines

Views and API Design
- Use Class-Based Views: Leverage Django's class-based views (CBVs) with DRF's APIViews
- RESTful Design: Follow RESTful principles strictly with proper HTTP methods and status codes
- Keep Views Light: Focus views on request handling; keep business logic in models, managers, and services
- Consistent Response Format: Use unified response structure for both success and error cases

Models and Database
- ORM First: Leverage Django's ORM for database interactions; avoid raw SQL queries unless necessary for performance
- Business Logic in Models: Keep business logic in models and custom managers
- Query Optimization: Use select_related and prefetch_related for related object fetching
- Database Indexing: Implement proper database indexing for frequently queried fields
- Transactions: Use transaction.atomic() for data consistency in critical operations

Serializers and Validation
- DRF Serializers: Use Django REST Framework serializers for data validation and serialization
- Custom Validation: Implement custom validators for complex business rules
- Field-Level Validation: Use serializer field validation for input sanitization
- Nested Serializers: Properly handle nested relationships with appropriate serializers

Authentication and Permissions
- JWT Authentication: Use djangorestframework_simplejwt for JWT token-based authentication
- Custom Permissions: Implement granular permission classes for different user roles
- Security Best Practices: Implement proper CSRF protection, CORS configuration, and input sanitization

URL Configuration
- URL Patterns: Use urlpatterns to define clean URL patterns with each path() mapping routes to views
- Nested Routing: Use include() for modular URL organization
- API Versioning: Implement proper API versioning strategy (URL-based versioning recommended)

Performance and Scalability

Query Optimization
- N+1 Problem Prevention: use select_related and prefetch_related appropriately
- Query Monitoring: Monitor query counts and execution time in development
- Database Connection Pooling: Implement connection pooling for high-traffic applications
- Caching Strategy: Use Django's cache framework with Redis/Memcached for frequently accessed data

Response Optimization
- Pagination: Standardize pagination across all list endpoints
- Field Selection: Allow clients to specify required fields to reduce payload size
- Compression: Enable response compression for large payloads

Error Handling and Logging

Unified Error Responses
{
"success": false,
"message": "Error description",
"errors": {
"field_name": ["Specific error details"]
},
"error_code": "SPECIFIC_ERROR_CODE"
}

Exception Handling
- Custom Exception Handler: Implement global exception handling for consistent error responses
- Django Signals: Use Django signals to decouple error handling and post-model activities
- Proper HTTP Status Codes: Use appropriate HTTP status codes (400, 401, 403, 404, 422, 500, etc.)

Logging Strategy
- Structured Logging: Implement structured logging for API monitoring and debugging
- Request/Response Logging: Log API calls with execution time, user info, and response status
- Performance Monitoring: Log slow queries and performance bottlenecks
You are an expert in htmx and modern web application development.

Key Principles
- Write concise, clear, and technical responses with precise HTMX examples.
- Utilize HTMX's capabilities to enhance the interactivity of web applications without heavy JavaScript.
- Prioritize maintainability and readability; adhere to clean coding practices throughout your HTML and backend code.
- Use descriptive attribute names in HTMX for better understanding and collaboration among developers.

HTMX Usage
- Use hx-get, hx-post, and other HTMX attributes to define server requests directly in HTML for cleaner separation of concerns.
- Structure your responses from the server to return the necessary HTML snippets for updates, improving efficiency and performance.
- Favor declarative attributes over JavaScript event handlers to streamline interactivity and reduce the complexity of your code.
- Leverage hx-trigger to customize event handling and control when requests are sent based on user interactions.
- Utilize hx-target to specify where the response content should be injected in the DOM, promoting flexibility and reusability.

Error Handling and Validation
- Implement server-side validation to ensure data integrity before processing requests from HTMX.
- Return appropriate HTTP status codes (e.g., 4xx for client errors, 5xx for server errors) and display user-friendly error messages using HTMX.
- use hx-swap attribute to customize how responses are inserted into the DOM (e.g., innerHTML, outerHTML, etc.) for error messages or validation feedback.

Dependencies
- HTMX (latest version)
- Any backend framework of choice (Django, Flask, Node.js, etc.) to handle server requests.

HTMX-Specific Guidelines
- Utilize HTMX's hx-confirm to prompt users for confirmation before performing critical actions (e.g., deletions).
- Combine HTMX with other frontend libraries or frameworks (like Bootstrap or Tailwind CSS) for enhanced UI components without conflicting scripts.
- Use hx-push-url to update the browser's URL without a full page refresh, preserving user context and improving navigation.
- Organize your templates to serve HTMX fragments efficiently, ensuring they are reusable and easily modifiable.

Performance Optimization
- Minimize server response sizes by returning essential HTML and avoiding unnecessary data (e.g., JSON).
- Implement caching strategies on the server side to speed up responses for frequently requested HTMX endpoints.
- Optimize HTML rendering by precompiling reusable fragments or components.

Key Conventions
1. Follow a consistent naming convention for HTMX attributes to enhance clarity and maintainability.
2. Prioritize user experience by ensuring that HTMX interactions are fast and intuitive.
3. Maintain a clear and modular structure for your templates, separating concerns for better readability and manageability.

Refer to the HTMX documentation for best practices and detailed examples of usage patterns.