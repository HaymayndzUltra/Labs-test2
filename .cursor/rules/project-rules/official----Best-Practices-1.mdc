---
description: "TAGS: [frontend,ui,component,official] | TRIGGERS: frontend,ui,component,interface,web,official | SCOPE: project-rules | DESCRIPTION: --- description: Guidelines for writing Next.js apps with tRPC globs:"**/*.ts, **/*.tsx, **/*.js, *..."
alwaysApply: false
---

## Best Practices

1. **Use Zod for Input Validation**: Always validate procedure inputs with Zod for better type safety and runtime validation.

```typescript
 import { z } from 'zod';

procedure
 .input(z.object({ 
 id: z.string().uuid(),
 email: z.string().email(),
 age: z.number().min(18) 
 }))
 .mutation(({ input }) => { /* your code */ })
 ```

2. **Organize Routers by Feature**: Split your routers into logical domains/features rather than having one large router.

```typescript
 // server/routers/user.ts
 export const userRouter = router({
 list: publicProcedure.query(() => { /* ... */ }),
 byId: publicProcedure.input(z.string()).query(({ input }) => { /* ... */ }),
 create: publicProcedure.input(/* ... */).mutation(({ input }) => { /* ... */ }),
 });

// server/routers/_app.ts
 import { userRouter } from './user';
 import { postRouter } from './post';

export const appRouter = router({
 user: userRouter,
 post: postRouter,
 });
 ```

3. **Use Middleware for Common Logic**: Apply middleware for authentication, logging, or other cross-cutting concerns.

```typescript
 const isAuthed = t.middleware(({ next, ctx }) => {
 if (!ctx.user) {
 throw new TRPCError({ code: 'UNAUTHORIZED' });
 }
 return next({
 ctx: {
 // Add user information to context
 user: ctx.user,
 },
 });
 });

const protectedProcedure = t.procedure.use(isAuthed);
 ```

4. **Use Proper Error Handling**: Utilize tRPC's error handling for consistent error responses.

```typescript
 import { TRPCError } from '@trpc/server';

publicProcedure
 .input(z.string())
 .query(({ input }) => {
 const user = getUserById(input);
 if (!user) {
 throw new TRPCError({
 code: 'NOT_FOUND',
 message: `User with id ${input} not found`,
 });
 }
 return user;
 });
 ```

5. **Use Data Transformers**: Use SuperJSON for automatic handling of dates, Maps, Sets, etc.

```typescript
 import { initTRPC } from '@trpc/server';
 import superjson from 'superjson';

const t = initTRPC.create({
 transformer: superjson,
 });
 ```

6. **Leverage React Query Integration**: For React projects, use tRPC's React Query utilities for data fetching, mutations, and caching.

```tsx
 function UserProfile({ userId }: { userId: string }) {
 const { data, isLoading, error } = trpc.user.byId.useQuery(userId);

if (isLoading) return <div>Loading...</div>;
 if (error) return <div>Error: {error.message}</div>;

return <div>{data.name}</div>;
 }
 ```

7. **Context Creation**: Create a proper context object to share resources across procedures.

```typescript
 // server/context.ts
 import { inferAsyncReturnType } from '@trpc/server';
 import * as trpcNext from '@trpc/server/adapters/next';
 import { prisma } from './prisma';

export async function createContext({
 req,
 res,
 }: trpcNext.CreateNextContextOptions) {
 const user = await getUser(req);
 return {
 req,
 res,
 prisma,
 user,
 };
 }

export type Context = inferAsyncReturnType<typeof createContext>;
 ```

8. **Type Exports**: Only export types, not the actual router implementations, from your server code to client code.

```typescript
 // Export type router type signature, NOT the router itself
 export type AppRouter = typeof appRouter;
 ```

9. **Procedure Types**: Use different procedure types for different authorization levels.

```typescript
 export const publicProcedure = t.procedure;
 export const protectedProcedure = t.procedure.use(isAuthed);
 export const adminProcedure = t.procedure.use(isAdmin);
 ```

10. **Performance Optimization**: Use batching and prefetching for optimized data loading.

```typescript
 // Client-side batching in Next.js setup
 httpBatchLink({
 url: `${getBaseUrl()}/api/trpc`,
 maxURLLength: 2083,
 })

// Prefetching data in Next.js
 export async function getStaticProps() {
 const ssg = createServerSideHelpers({
 router: appRouter,
 ctx: {},
 });

await ssg.post.byId.prefetch('1');

return {
 props: {
 trpcState: ssg.dehydrate(),
 },
 revalidate: 1,
 };
 }
 ```
