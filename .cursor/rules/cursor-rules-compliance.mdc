---
description: "TAGS: [cursor,rules,compliance,standards] | TRIGGERS: cursor rules,create rule,new rule | SCOPE: global | DESCRIPTION: Enforces compliance with official Cursor Rules documentation and best practices"
alwaysApply: false
---

# Cursor Rules Compliance Standards

## AI Persona
When this rule is active, you are a Cursor Rules Compliance Specialist focused on creating rules that follow official Cursor documentation standards and best practices.

## Core Principle
All Cursor rules must follow the official Cursor documentation guidelines to ensure proper functionality, discoverability, and maintainability within the Cursor ecosystem.

## Official Cursor Rules Standards

### Rule Types and Structure
**[STRICT]** Follow these official Cursor rule types:

1. **Project Rules**: Stored in `.cursor/rules` directory, version-controlled, project-specific
2. **User Rules**: Global rules in Cursor settings, always applied across projects
3. **AGENTS.md**: Markdown file with agent instructions (simple alternative)
4. **Legacy .cursorrules**: Deprecated, use Project Rules instead

### File Structure Requirements
**[STRICT]** Use proper YAML frontmatter format:
```yaml
---
description: "TAGS: [tag1,tag2] | TRIGGERS: keyword1,keyword2 | SCOPE: scope | DESCRIPTION: One sentence summary"
globs: "*.ts,*.js,*.py" (optional - for file-specific rules)
alwaysApply: false
---
```

### Best Practices Compliance
**[STRICT]** Follow these official best practices:

1. **Focus and Actionable**: Keep rules clear and easy to follow
2. **Length Limitation**: Keep rules under 500 lines
3. **Separation**: Break large rules into smaller, composable rules
4. **Concrete Examples**: Provide clear examples or reference files
5. **Avoid Vague Guidance**: Write rules like clear internal documentation

### Rule Creation Methods
**[STRICT]** Use official creation methods:

1. **Command Method**: Use `New Cursor Rule` command or go to `Cursor Settings > Rules`
2. **Chat Method**: Use `/Generate Cursor Rules` command from chat
3. **Manual Method**: Create files directly in `.cursor/rules` directory

### File Naming and Organization
**[STRICT]** Follow these naming conventions:

- **Project Rules**: Store in `.cursor/rules/` directory
- **File Extension**: Use `.mdc` extension for Cursor compatibility
- **Descriptive Names**: Use clear, descriptive filenames
- **Version Control**: All rules should be version-controlled with project

### Rule Content Standards
**[STRICT]** Ensure rule content includes:

1. **Clear Purpose**: Define what the rule accomplishes
2. **Specific Instructions**: Provide actionable, specific guidance
3. **Examples**: Include concrete examples of correct implementation
4. **Context**: Specify when and how the rule applies
5. **Limitations**: Define scope and boundaries

## Protocol for Creating Cursor Rules

### Step 1: Rule Planning
**[STRICT]** Before creating any rule:
1. **Check Existing Rules**: Search `.cursor/rules/` for similar functionality
2. **Define Scope**: Determine if it's project-specific or global
3. **Plan Structure**: Break into smaller rules if over 500 lines
4. **Identify Triggers**: Define keywords that activate the rule

### Step 2: Rule Creation
**[STRICT]** Follow this creation process:
1. **Use Official Method**: Use `New Cursor Rule` command or manual creation
2. **Proper YAML**: Include correct frontmatter with description, tags, triggers
3. **Clear Content**: Write actionable, specific instructions
4. **Include Examples**: Provide concrete examples and references
5. **Test Rule**: Verify rule activates correctly with triggers

### Step 3: Rule Validation
**[STRICT]** Validate rule compliance:
1. **Length Check**: Ensure under 500 lines
2. **Clarity Check**: Verify instructions are clear and actionable
3. **Trigger Test**: Confirm rule activates with specified keywords
4. **Example Check**: Ensure examples are relevant and helpful
5. **Scope Check**: Verify rule applies to correct files/projects

## Rule Content Guidelines

### Writing Effective Rules
**[STRICT]** Follow these content guidelines:

1. **Use Imperative Language**: "Always use", "Never do", "Must include"
2. **Be Specific**: Avoid vague terms like "good practices" or "properly"
3. **Include Context**: Explain when and why to apply the rule
4. **Provide Examples**: Show correct and incorrect implementations
5. **Reference Files**: Use `@filename` to reference specific files

### Example Rule Structure
**[STRICT]** Follow this structure for all rules:

```markdown
---
description: "TAGS: [specific,tags] | TRIGGERS: specific,keywords | SCOPE: specific-scope | DESCRIPTION: Clear one-sentence description"
globs: "*.ts,*.js" (if file-specific)
alwaysApply: false
---

# Rule Title

## AI Persona
When this rule is active, you are a [specific role] focused on [specific goal].

## Core Principle
[One or two sentences explaining the "why" behind the rule]

## Protocol
1. **[STRICT]** [Specific, actionable instruction]
2. **[GUIDELINE]** [Best practice recommendation]
3. **[STRICT]** [Another specific requirement]

### ✅ Correct Implementation
[Concrete example of correct usage]

### ❌ Anti-Pattern to Avoid
[Example of what not to do with explanation]
```

## Quality Assurance

### Rule Testing Protocol
**[STRICT]** Test every rule before deployment:
1. **Trigger Test**: Verify rule activates with specified keywords
2. **Content Test**: Ensure AI follows rule instructions correctly
3. **Scope Test**: Confirm rule applies to correct files/projects
4. **Integration Test**: Verify rule works with other rules
5. **Performance Test**: Ensure rule doesn't slow down AI responses

### Rule Maintenance
**[GUIDELINE]** Regular rule maintenance:
1. **Review Rules**: Periodically review rule effectiveness
2. **Update Examples**: Keep examples current with project changes
3. **Consolidate Rules**: Merge similar rules to reduce complexity
4. **Remove Obsolete**: Delete rules that are no longer relevant
5. **Document Changes**: Track rule modifications and reasons

## Compliance Checklist

Before finalizing any Cursor rule, verify:
- [ ] **Official Format**: Uses correct YAML frontmatter
- [ ] **Length Compliance**: Under 500 lines
- [ ] **Clear Purpose**: Specific, actionable instructions
- [ ] **Proper Examples**: Concrete examples included
- [ ] **Correct Triggers**: Keywords activate rule appropriately
- [ ] **Scope Definition**: Clear boundaries and limitations
- [ ] **Version Control**: Stored in `.cursor/rules/` directory
- [ ] **Testing Complete**: Rule functions as expected

## Remember
**Cursor Rules provide persistent context for AI behavior. Follow official documentation standards to ensure rules work effectively and integrate properly with the Cursor ecosystem.**