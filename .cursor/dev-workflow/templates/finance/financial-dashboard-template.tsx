/**
 * SOX and PCI DSS Compliant Financial Dashboard
 * Generated by Enhanced Client Project Scaffold
 * 
 * This component provides a secure financial dashboard with
 * SOX compliance controls and PCI DSS security requirements.
 */

import React, { useState, useEffect, useCallback } from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import {
  AlertTriangle,
  Shield,
  Lock,
  Eye,
  EyeOff,
  DollarSign,
  TrendingUp,
  TrendingDown,
  Users,
  CreditCard,
  FileText,
  Settings,
  CheckCircle,
  XCircle,
  Clock,
  AlertCircle,
} from 'lucide-react';

// Types
interface FinancialData {
  id: string;
  accountNumber: string;
  accountType: 'checking' | 'savings' | 'credit';
  balance: number;
  creditLimit?: number;
  status: 'active' | 'suspended' | 'closed';
  lastTransaction: string;
  requiresDualAuth: boolean;
  managementApprovalRequired: boolean;
}

interface Transaction {
  id: string;
  transactionId: string;
  amount: number;
  type: 'debit' | 'credit' | 'transfer';
  description: string;
  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';
  date: string;
  authorizedBy: string;
  riskScore?: number;
  riskLevel?: 'low' | 'medium' | 'high' | 'critical';
  dualAuthUsed: boolean;
  managementApprovalUsed: boolean;
}

interface ComplianceMetrics {
  soxComplianceScore: number;
  pciComplianceScore: number;
  totalFinancialActivities: number;
  highValueTransactions: number;
  encryptionStatus: 'active' | 'inactive';
  tokenizationStatus: 'active' | 'inactive';
  auditLoggingStatus: 'active' | 'inactive';
  fraudDetectionStatus: 'active' | 'inactive';
}

interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  role: 'user' | 'manager' | 'admin' | 'auditor';
  accessLevel: 'standard' | 'elevated' | 'management' | 'audit';
  mfaEnabled: boolean;
  dualAuthorizationRequired: boolean;
  managementApprovalRequired: boolean;
}

// SOX Configuration
const SOX_CONFIG = {
  dualAuthorizationThreshold: 10000,
  managementApprovalThreshold: 50000,
  auditRetentionYears: 7,
  realTimeReporting: true,
};

// PCI Configuration
const PCI_CONFIG = {
  encryptionRequired: true,
  tokenizationRequired: true,
  panStorageProhibited: true,
  cvvStorageProhibited: true,
  auditLogging: true,
};

// Risk Level Colors
const RISK_COLORS = {
  low: 'bg-green-100 text-green-800',
  medium: 'bg-yellow-100 text-yellow-800',
  high: 'bg-orange-100 text-orange-800',
  critical: 'bg-red-100 text-red-800',
};

// Status Colors
const STATUS_COLORS = {
  pending: 'bg-yellow-100 text-yellow-800',
  processing: 'bg-blue-100 text-blue-800',
  completed: 'bg-green-100 text-green-800',
  failed: 'bg-red-100 text-red-800',
  cancelled: 'bg-gray-100 text-gray-800',
};

export default function FinancialDashboard() {
  // State
  const [user, setUser] = useState<User | null>(null);
  const [financialData, setFinancialData] = useState<FinancialData[]>([]);
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [complianceMetrics, setComplianceMetrics] = useState<ComplianceMetrics | null>(null);
  const [selectedAccount, setSelectedAccount] = useState<string>('');
  const [showSensitiveData, setShowSensitiveData] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // Dialog states
  const [isTransactionDialogOpen, setIsTransactionDialogOpen] = useState(false);
  const [isApprovalDialogOpen, setIsApprovalDialogOpen] = useState(false);
  const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(null);
  
  // Form states
  const [transactionForm, setTransactionForm] = useState({
    amount: '',
    description: '',
    type: 'debit' as 'debit' | 'credit' | 'transfer',
    targetAccount: '',
  });

  // Load initial data
  useEffect(() => {
    loadDashboardData();
  }, []);

  const loadDashboardData = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      // Load user data
      const userResponse = await fetch('/api/user/profile', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });
      
      if (!userResponse.ok) {
        throw new Error('Failed to load user data');
      }
      
      const userData = await userResponse.json();
      setUser(userData);
      
      // Load financial data
      const financialResponse = await fetch('/api/financial/accounts', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });
      
      if (!financialResponse.ok) {
        throw new Error('Failed to load financial data');
      }
      
      const financialData = await financialResponse.json();
      setFinancialData(financialData);
      
      // Load transactions
      const transactionsResponse = await fetch('/api/financial/transactions', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });
      
      if (!transactionsResponse.ok) {
        throw new Error('Failed to load transactions');
      }
      
      const transactionsData = await transactionsResponse.json();
      setTransactions(transactionsData);
      
      // Load compliance metrics
      const complianceResponse = await fetch('/api/compliance/status', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });
      
      if (!complianceResponse.ok) {
        throw new Error('Failed to load compliance metrics');
      }
      
      const complianceData = await complianceResponse.json();
      setComplianceMetrics(complianceData);
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
      console.error('Dashboard data loading error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  // SOX Compliance Functions
  const requiresDualAuthorization = (amount: number): boolean => {
    return amount >= SOX_CONFIG.dualAuthorizationThreshold || 
           (user?.dualAuthorizationRequired ?? false);
  };

  const requiresManagementApproval = (amount: number): boolean => {
    return amount >= SOX_CONFIG.managementApprovalThreshold || 
           (user?.managementApprovalRequired ?? false);
  };

  const canViewSensitiveData = (): boolean => {
    return user?.accessLevel === 'elevated' || 
           user?.accessLevel === 'management' || 
           user?.accessLevel === 'audit';
  };

  const canApproveTransactions = (): boolean => {
    return user?.role === 'manager' || user?.role === 'admin';
  };

  const canAuditTransactions = (): boolean => {
    return user?.role === 'auditor' || user?.role === 'admin';
  };

  // Transaction Functions
  const handleTransactionSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const amount = parseFloat(transactionForm.amount);
    
    if (isNaN(amount) || amount <= 0) {
      setError('Invalid amount');
      return;
    }
    
    // Check SOX requirements
    const needsDualAuth = requiresDualAuthorization(amount);
    const needsMgmtApproval = requiresManagementApproval(amount);
    
    if (needsDualAuth || needsMgmtApproval) {
      setSelectedTransaction({
        id: '',
        transactionId: `txn_${Date.now()}`,
        amount,
        type: transactionForm.type as 'debit' | 'credit' | 'transfer',
        description: transactionForm.description,
        status: 'pending',
        date: new Date().toISOString(),
        authorizedBy: user?.id || '',
        dualAuthUsed: needsDualAuth,
        managementApprovalUsed: needsMgmtApproval,
      });
      setIsApprovalDialogOpen(true);
      return;
    }
    
    await processTransaction(amount, transactionForm.type, transactionForm.description);
  };

  const processTransaction = async (
    amount: number, 
    type: string, 
    description: string
  ) => {
    try {
      const response = await fetch('/api/financial/transactions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
        body: JSON.stringify({
          amount,
          type,
          description,
          accountId: selectedAccount || financialData[0]?.id,
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || 'Transaction failed');
      }
      
      const result = await response.json();
      
      // Refresh data
      await loadDashboardData();
      
      // Close dialog
      setIsTransactionDialogOpen(false);
      setTransactionForm({
        amount: '',
        description: '',
        type: 'debit',
        targetAccount: '',
      });
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Transaction failed');
    }
  };

  const approveTransaction = async (transactionId: string) => {
    try {
      const response = await fetch(`/api/financial/transactions/${transactionId}/approve`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });
      
      if (!response.ok) {
        throw new Error('Approval failed');
      }
      
      // Refresh data
      await loadDashboardData();
      setIsApprovalDialogOpen(false);
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Approval failed');
    }
  };

  // Format currency
  const formatCurrency = (amount: number): string => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
    }).format(amount);
  };

  // Format account number (PCI compliance)
  const formatAccountNumber = (accountNumber: string): string => {
    if (showSensitiveData && canViewSensitiveData()) {
      return accountNumber;
    }
    return `****${accountNumber.slice(-4)}`;
  };

  // Get risk badge
  const getRiskBadge = (riskLevel?: string) => {
    if (!riskLevel) return null;
    
    return (
      <Badge className={RISK_COLORS[riskLevel as keyof typeof RISK_COLORS]}>
        {riskLevel.toUpperCase()}
      </Badge>
    );
  };

  // Get status badge
  const getStatusBadge = (status: string) => {
    return (
      <Badge className={STATUS_COLORS[status as keyof typeof STATUS_COLORS]}>
        {status.toUpperCase()}
      </Badge>
    );
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
          <p className="text-red-600 mb-4">{error}</p>
          <Button onClick={loadDashboardData}>Retry</Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">
              Financial Dashboard
            </h1>
            <p className="text-gray-600 mt-2">
              SOX and PCI DSS Compliant Financial Management
            </p>
          </div>
          <div className="flex items-center space-x-4">
            <Button
              variant="outline"
              onClick={() => setShowSensitiveData(!showSensitiveData)}
              disabled={!canViewSensitiveData()}
            >
              {showSensitiveData ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              {showSensitiveData ? 'Hide' : 'Show'} Sensitive Data
            </Button>
            <Button
              onClick={() => setIsTransactionDialogOpen(true)}
              disabled={!user}
            >
              <DollarSign className="h-4 w-4 mr-2" />
              New Transaction
            </Button>
          </div>
        </div>
      </div>

      {/* Compliance Status */}
      {complianceMetrics && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">SOX Compliance</CardTitle>
              <Shield className="h-4 w-4 text-green-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-600">
                {complianceMetrics.soxComplianceScore}%
              </div>
              <Progress 
                value={complianceMetrics.soxComplianceScore} 
                className="mt-2"
              />
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">PCI Compliance</CardTitle>
              <Lock className="h-4 w-4 text-blue-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-blue-600">
                {complianceMetrics.pciComplianceScore}%
              </div>
              <Progress 
                value={complianceMetrics.pciComplianceScore} 
                className="mt-2"
              />
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">High Value Transactions</CardTitle>
              <TrendingUp className="h-4 w-4 text-orange-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-orange-600">
                {complianceMetrics.highValueTransactions}
              </div>
              <p className="text-xs text-gray-600">
                Last 30 days
              </p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Activities</CardTitle>
              <FileText className="h-4 w-4 text-purple-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-purple-600">
                {complianceMetrics.totalFinancialActivities}
              </div>
              <p className="text-xs text-gray-600">
                Last 30 days
              </p>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Financial Accounts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <Card>
          <CardHeader>
            <CardTitle>Financial Accounts</CardTitle>
            <CardDescription>
              Account balances and status information
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {financialData.map((account) => (
                <div
                  key={account.id}
                  className="flex items-center justify-between p-4 border rounded-lg"
                >
                  <div className="flex-1">
                    <div className="flex items-center space-x-2">
                      <CreditCard className="h-4 w-4 text-gray-500" />
                      <span className="font-medium">
                        {formatAccountNumber(account.accountNumber)}
                      </span>
                      <Badge variant="outline">
                        {account.accountType}
                      </Badge>
                    </div>
                    <div className="text-sm text-gray-600 mt-1">
                      Balance: {formatCurrency(account.balance)}
                      {account.creditLimit && (
                        <span className="ml-2">
                          Limit: {formatCurrency(account.creditLimit)}
                        </span>
                      )}
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    {account.requiresDualAuth && (
                      <Badge className="bg-yellow-100 text-yellow-800">
                        Dual Auth
                      </Badge>
                    )}
                    {account.managementApprovalRequired && (
                      <Badge className="bg-red-100 text-red-800">
                        Mgmt Approval
                      </Badge>
                    )}
                    <Badge
                      className={
                        account.status === 'active'
                          ? 'bg-green-100 text-green-800'
                          : 'bg-red-100 text-red-800'
                      }
                    >
                      {account.status}
                    </Badge>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Recent Transactions */}
        <Card>
          <CardHeader>
            <CardTitle>Recent Transactions</CardTitle>
            <CardDescription>
              Latest financial activities
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {transactions.slice(0, 5).map((transaction) => (
                <div
                  key={transaction.id}
                  className="flex items-center justify-between p-3 border rounded-lg"
                >
                  <div className="flex-1">
                    <div className="flex items-center space-x-2">
                      <span className="font-medium">
                        {transaction.description}
                      </span>
                      {getRiskBadge(transaction.riskLevel)}
                    </div>
                    <div className="text-sm text-gray-600 mt-1">
                      {new Date(transaction.date).toLocaleDateString()}
                      {transaction.dualAuthUsed && (
                        <span className="ml-2 text-yellow-600">
                          • Dual Auth
                        </span>
                      )}
                      {transaction.managementApprovalUsed && (
                        <span className="ml-2 text-red-600">
                          • Mgmt Approval
                        </span>
                      )}
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span
                      className={`font-medium ${
                        transaction.type === 'credit'
                          ? 'text-green-600'
                          : 'text-red-600'
                      }`}
                    >
                      {transaction.type === 'credit' ? '+' : '-'}
                      {formatCurrency(transaction.amount)}
                    </span>
                    {getStatusBadge(transaction.status)}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Transaction Dialog */}
      <Dialog open={isTransactionDialogOpen} onOpenChange={setIsTransactionDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>New Transaction</DialogTitle>
            <DialogDescription>
              Create a new financial transaction with SOX compliance controls
            </DialogDescription>
          </DialogHeader>
          <form onSubmit={handleTransactionSubmit}>
            <div className="space-y-4">
              <div>
                <Label htmlFor="amount">Amount</Label>
                <Input
                  id="amount"
                  type="number"
                  step="0.01"
                  value={transactionForm.amount}
                  onChange={(e) =>
                    setTransactionForm({ ...transactionForm, amount: e.target.value })
                  }
                  required
                />
              </div>
              <div>
                <Label htmlFor="type">Transaction Type</Label>
                <Select
                  value={transactionForm.type}
                  onValueChange={(value) =>
                    setTransactionForm({ ...transactionForm, type: value as any })
                  }
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="debit">Debit</SelectItem>
                    <SelectItem value="credit">Credit</SelectItem>
                    <SelectItem value="transfer">Transfer</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="description">Description</Label>
                <Input
                  id="description"
                  value={transactionForm.description}
                  onChange={(e) =>
                    setTransactionForm({ ...transactionForm, description: e.target.value })
                  }
                  required
                />
              </div>
              {requiresDualAuthorization(parseFloat(transactionForm.amount) || 0) && (
                <div className="p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <AlertTriangle className="h-4 w-4 text-yellow-600" />
                    <span className="text-sm text-yellow-800">
                      This transaction requires dual authorization
                    </span>
                  </div>
                </div>
              )}
              {requiresManagementApproval(parseFloat(transactionForm.amount) || 0) && (
                <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <AlertTriangle className="h-4 w-4 text-red-600" />
                    <span className="text-sm text-red-800">
                      This transaction requires management approval
                    </span>
                  </div>
                </div>
              )}
            </div>
            <DialogFooter>
              <Button
                type="button"
                variant="outline"
                onClick={() => setIsTransactionDialogOpen(false)}
              >
                Cancel
              </Button>
              <Button type="submit">Create Transaction</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      {/* Approval Dialog */}
      <AlertDialog open={isApprovalDialogOpen} onOpenChange={setIsApprovalDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Transaction Approval Required</AlertDialogTitle>
            <AlertDialogDescription>
              This transaction requires additional approval due to SOX compliance requirements.
              {selectedTransaction?.dualAuthUsed && (
                <div className="mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded">
                  <strong>Dual Authorization Required:</strong> Another authorized user must approve this transaction.
                </div>
              )}
              {selectedTransaction?.managementApprovalUsed && (
                <div className="mt-2 p-2 bg-red-50 border border-red-200 rounded">
                  <strong>Management Approval Required:</strong> A manager must approve this transaction.
                </div>
              )}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => selectedTransaction && approveTransaction(selectedTransaction.transactionId)}
            >
              Approve Transaction
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}
